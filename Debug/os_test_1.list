
os_test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f2c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030ec  080030ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030ec  080030ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030ec  080030ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030ec  080030ec  000130ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030f0  080030f0  000130f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000090c  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000091c  2000091c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000dbd5  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001cbc  00000000  00000000  0002dc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c20  00000000  00000000  0002f910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000969  00000000  00000000  00030530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b437  00000000  00000000  00030e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e883  00000000  00000000  0004c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a3d42  00000000  00000000  0005ab53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000031f8  00000000  00000000  000fe898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00101a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800309c 	.word	0x0800309c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	0800309c 	.word	0x0800309c

080001c8 <Sched_handler>:

.section .text
.type	Sched_handler, %function
// Does not compy with AAPCS
Sched_handler:
	CPSID I
 80001c8:	b672      	cpsid	i

	PUSH {r4-r11}
 80001ca:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	// Increment scheduler_tick
	LDR r0, =scheduler_tick
 80001ce:	4816      	ldr	r0, [pc, #88]	; (8000228 <end_if+0x8>)
	LDR r1, [r0]
 80001d0:	6801      	ldr	r1, [r0, #0]
	ADD r1, r1, #1
 80001d2:	f101 0101 	add.w	r1, r1, #1
	STR r1, [r0]
 80001d6:	6001      	str	r1, [r0, #0]

	// Decide which thread to run next
	LDR r0, =current_thread
 80001d8:	4814      	ldr	r0, [pc, #80]	; (800022c <end_if+0xc>)
	LDR r0, [r0]
 80001da:	6800      	ldr	r0, [r0, #0]
	CMP r0, #0
 80001dc:	2800      	cmp	r0, #0
	// If 0, no thread is running
	BEQ start_thread1
 80001de:	d002      	beq.n	80001e6 <start_thread1>
	CMP r0, #1
 80001e0:	2801      	cmp	r0, #1
	// If 1, thread1 is running
	BEQ switch_to_thread2
 80001e2:	d008      	beq.n	80001f6 <switch_to_thread2>
	// If 2, thread2 is running
	B switch_to_thread1
 80001e4:	e012      	b.n	800020c <switch_to_thread1>

080001e6 <start_thread1>:

start_thread1:
	LDR r0, =thread1_sp
 80001e6:	4812      	ldr	r0, [pc, #72]	; (8000230 <end_if+0x10>)
	LDR r0, [r0]
 80001e8:	6800      	ldr	r0, [r0, #0]
	MOV sp, r0
 80001ea:	4685      	mov	sp, r0

	// Set current_thread to 1
	LDR r0, =current_thread
 80001ec:	480f      	ldr	r0, [pc, #60]	; (800022c <end_if+0xc>)
	MOV r1, #1
 80001ee:	f04f 0101 	mov.w	r1, #1
	STR r1, [r0]
 80001f2:	6001      	str	r1, [r0, #0]

	B end_if
 80001f4:	e014      	b.n	8000220 <end_if>

080001f6 <switch_to_thread2>:

switch_to_thread2:
	// Save thread1 sp
	MOV r1, sp
 80001f6:	4669      	mov	r1, sp
	LDR r0, =thread1_sp
 80001f8:	480d      	ldr	r0, [pc, #52]	; (8000230 <end_if+0x10>)
	STR r1, [r0]
 80001fa:	6001      	str	r1, [r0, #0]

	// Switch to thread2 sp

	LDR r0, =thread2_sp
 80001fc:	480d      	ldr	r0, [pc, #52]	; (8000234 <end_if+0x14>)
	LDR r1, [r0]
 80001fe:	6801      	ldr	r1, [r0, #0]
	MOV sp, r1
 8000200:	468d      	mov	sp, r1

	// Set current_thread to 2
	LDR r0, =current_thread
 8000202:	480a      	ldr	r0, [pc, #40]	; (800022c <end_if+0xc>)
	MOV r1, #2
 8000204:	f04f 0102 	mov.w	r1, #2
	STR r1, [r0]
 8000208:	6001      	str	r1, [r0, #0]

	B end_if
 800020a:	e009      	b.n	8000220 <end_if>

0800020c <switch_to_thread1>:

switch_to_thread1:
	// Save thread2 sp
	MOV r1, sp
 800020c:	4669      	mov	r1, sp
	LDR r0, =thread2_sp
 800020e:	4809      	ldr	r0, [pc, #36]	; (8000234 <end_if+0x14>)
	STR r1, [r0]
 8000210:	6001      	str	r1, [r0, #0]

	// Switch to thread1 sp

	LDR r0, =thread1_sp
 8000212:	4807      	ldr	r0, [pc, #28]	; (8000230 <end_if+0x10>)
	LDR r1, [r0]
 8000214:	6801      	ldr	r1, [r0, #0]
	MOV sp, r1
 8000216:	468d      	mov	sp, r1

	// Set current_thread to 1
	LDR r0, =current_thread
 8000218:	4804      	ldr	r0, [pc, #16]	; (800022c <end_if+0xc>)
	MOV r1, #1
 800021a:	f04f 0101 	mov.w	r1, #1
	STR r1, [r0]
 800021e:	6001      	str	r1, [r0, #0]

08000220 <end_if>:

	//B end_if

end_if:
	POP {r4-r11}
 8000220:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//add r0, r0, r1
	CPSIE I
 8000224:	b662      	cpsie	i
	bx lr
 8000226:	4770      	bx	lr
	LDR r0, =scheduler_tick
 8000228:	20000034 	.word	0x20000034
	LDR r0, =current_thread
 800022c:	20000030 	.word	0x20000030
	LDR r0, =thread1_sp
 8000230:	20000840 	.word	0x20000840
	LDR r0, =thread2_sp
 8000234:	20000438 	.word	0x20000438

08000238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	4603      	mov	r3, r0
 8000240:	6039      	str	r1, [r7, #0]
 8000242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000248:	2b00      	cmp	r3, #0
 800024a:	db0a      	blt.n	8000262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024c:	683b      	ldr	r3, [r7, #0]
 800024e:	b2da      	uxtb	r2, r3
 8000250:	490c      	ldr	r1, [pc, #48]	; (8000284 <__NVIC_SetPriority+0x4c>)
 8000252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000256:	0112      	lsls	r2, r2, #4
 8000258:	b2d2      	uxtb	r2, r2
 800025a:	440b      	add	r3, r1
 800025c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000260:	e00a      	b.n	8000278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	b2da      	uxtb	r2, r3
 8000266:	4908      	ldr	r1, [pc, #32]	; (8000288 <__NVIC_SetPriority+0x50>)
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	f003 030f 	and.w	r3, r3, #15
 800026e:	3b04      	subs	r3, #4
 8000270:	0112      	lsls	r2, r2, #4
 8000272:	b2d2      	uxtb	r2, r2
 8000274:	440b      	add	r3, r1
 8000276:	761a      	strb	r2, [r3, #24]
}
 8000278:	bf00      	nop
 800027a:	370c      	adds	r7, #12
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000e100 	.word	0xe000e100
 8000288:	e000ed00 	.word	0xe000ed00

0800028c <start_critical>:

uint32_t thread_is_running;
uint32_t current_thread;
uint32_t scheduler_tick;

void start_critical(void) {
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000290:	b672      	cpsid	i
}
 8000292:	bf00      	nop
	__disable_irq();
}
 8000294:	bf00      	nop
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <end_critical>:

void end_critical(void) {
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsie i" : : : "memory");
 80002a2:	b662      	cpsie	i
}
 80002a4:	bf00      	nop
	__enable_irq();
}
 80002a6:	bf00      	nop
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr

080002b0 <thread1_func>:

// PA5 thread1
// PB1 thread2

void thread1_func(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
	uint32_t led_on = 0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
	uint32_t prev_sched_tick = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60bb      	str	r3, [r7, #8]

	while(1) {
		if (led_on) {
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d00a      	beq.n	80002da <thread1_func+0x2a>
			start_critical();
 80002c4:	f7ff ffe2 	bl	800028c <start_critical>
			GPIOA->BSRR = (0x1 << 5) << 0;
 80002c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002cc:	2220      	movs	r2, #32
 80002ce:	619a      	str	r2, [r3, #24]
			end_critical();
 80002d0:	f7ff ffe5 	bl	800029e <end_critical>
			led_on = 0;
 80002d4:	2300      	movs	r3, #0
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	e00a      	b.n	80002f0 <thread1_func+0x40>
		}
		else {
			start_critical();
 80002da:	f7ff ffd7 	bl	800028c <start_critical>
			GPIOA->BSRR = (0x1 << 5) << 16;
 80002de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80002e6:	619a      	str	r2, [r3, #24]
			end_critical();
 80002e8:	f7ff ffd9 	bl	800029e <end_critical>
			led_on = 1;
 80002ec:	2301      	movs	r3, #1
 80002ee:	60fb      	str	r3, [r7, #12]
		}

		// 100 * SCHEDULER_PERIOD_MS is 1 s
		uint32_t current_scheduler_tick = 0;
 80002f0:	2300      	movs	r3, #0
 80002f2:	607b      	str	r3, [r7, #4]
		while(current_scheduler_tick < prev_sched_tick + 100) {
 80002f4:	e006      	b.n	8000304 <thread1_func+0x54>
			start_critical();
 80002f6:	f7ff ffc9 	bl	800028c <start_critical>
			current_scheduler_tick = scheduler_tick;
 80002fa:	4b07      	ldr	r3, [pc, #28]	; (8000318 <thread1_func+0x68>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	607b      	str	r3, [r7, #4]
			end_critical();
 8000300:	f7ff ffcd 	bl	800029e <end_critical>
		while(current_scheduler_tick < prev_sched_tick + 100) {
 8000304:	68bb      	ldr	r3, [r7, #8]
 8000306:	3364      	adds	r3, #100	; 0x64
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	429a      	cmp	r2, r3
 800030c:	d3f3      	bcc.n	80002f6 <thread1_func+0x46>
		}
		prev_sched_tick = scheduler_tick;
 800030e:	4b02      	ldr	r3, [pc, #8]	; (8000318 <thread1_func+0x68>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	60bb      	str	r3, [r7, #8]
	while(1) {
 8000314:	e7d3      	b.n	80002be <thread1_func+0xe>
 8000316:	bf00      	nop
 8000318:	20000034 	.word	0x20000034

0800031c <thread2_func>:
	}
}

void thread2_func(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b084      	sub	sp, #16
 8000320:	af00      	add	r7, sp, #0
	uint32_t led_on = 0;
 8000322:	2300      	movs	r3, #0
 8000324:	60fb      	str	r3, [r7, #12]
	uint32_t prev_sched_tick = 0;
 8000326:	2300      	movs	r3, #0
 8000328:	60bb      	str	r3, [r7, #8]

	while(1) {
		if (led_on) {
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d009      	beq.n	8000344 <thread2_func+0x28>
			start_critical();
 8000330:	f7ff ffac 	bl	800028c <start_critical>
			GPIOB->BSRR = (0x1 << 1) << 0;
 8000334:	4b12      	ldr	r3, [pc, #72]	; (8000380 <thread2_func+0x64>)
 8000336:	2202      	movs	r2, #2
 8000338:	619a      	str	r2, [r3, #24]
			end_critical();
 800033a:	f7ff ffb0 	bl	800029e <end_critical>
			led_on = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	e009      	b.n	8000358 <thread2_func+0x3c>
		}
		else {
			start_critical();
 8000344:	f7ff ffa2 	bl	800028c <start_critical>
			GPIOB->BSRR = (0x1 << 1) << 16;
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <thread2_func+0x64>)
 800034a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800034e:	619a      	str	r2, [r3, #24]
			end_critical();
 8000350:	f7ff ffa5 	bl	800029e <end_critical>
			led_on = 1;
 8000354:	2301      	movs	r3, #1
 8000356:	60fb      	str	r3, [r7, #12]
		}

		// 100 * SCHEDULER_PERIOD_MS is 1 s
		uint32_t current_scheduler_tick = 0;
 8000358:	2300      	movs	r3, #0
 800035a:	607b      	str	r3, [r7, #4]
		while(current_scheduler_tick < prev_sched_tick + 70) {
 800035c:	e006      	b.n	800036c <thread2_func+0x50>
			start_critical();
 800035e:	f7ff ff95 	bl	800028c <start_critical>
			current_scheduler_tick = scheduler_tick;
 8000362:	4b08      	ldr	r3, [pc, #32]	; (8000384 <thread2_func+0x68>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	607b      	str	r3, [r7, #4]
			end_critical();
 8000368:	f7ff ff99 	bl	800029e <end_critical>
		while(current_scheduler_tick < prev_sched_tick + 70) {
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	3346      	adds	r3, #70	; 0x46
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	429a      	cmp	r2, r3
 8000374:	d3f3      	bcc.n	800035e <thread2_func+0x42>
		}
		prev_sched_tick = scheduler_tick;
 8000376:	4b03      	ldr	r3, [pc, #12]	; (8000384 <thread2_func+0x68>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	60bb      	str	r3, [r7, #8]
	while(1) {
 800037c:	e7d5      	b.n	800032a <thread2_func+0xe>
 800037e:	bf00      	nop
 8000380:	48000400 	.word	0x48000400
 8000384:	20000034 	.word	0x20000034

08000388 <setup_stack>:
// Assigns stack statically because it needs 8-byte alignment
// Does malloc provide 8-byte alignment?
// Uses STACK_SIZE


void setup_stack(uint32_t *stack_pt, uint32_t **thread_sp, void (*thread_func)(void)) {
 8000388:	b480      	push	{r7}
 800038a:	b087      	sub	sp, #28
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
	uint32_t *thread_stack_top = (uint32_t *)stack_pt + STACK_SIZE;
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800039a:	617b      	str	r3, [r7, #20]

	*(--thread_stack_top) = 0x01000000; // status register
 800039c:	697b      	ldr	r3, [r7, #20]
 800039e:	3b04      	subs	r3, #4
 80003a0:	617b      	str	r3, [r7, #20]
 80003a2:	697b      	ldr	r3, [r7, #20]
 80003a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80003a8:	601a      	str	r2, [r3, #0]
	*(--thread_stack_top) = (uint32_t)thread_func; // Return address
 80003aa:	697b      	ldr	r3, [r7, #20]
 80003ac:	3b04      	subs	r3, #4
 80003ae:	617b      	str	r3, [r7, #20]
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	601a      	str	r2, [r3, #0]
	*(--thread_stack_top) = 0xFFFFFFFD; // LR
 80003b6:	697b      	ldr	r3, [r7, #20]
 80003b8:	3b04      	subs	r3, #4
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	f06f 0202 	mvn.w	r2, #2
 80003c2:	601a      	str	r2, [r3, #0]
	*(--thread_stack_top) = 0x12121212; // R12
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	3b04      	subs	r3, #4
 80003c8:	617b      	str	r3, [r7, #20]
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80003d0:	601a      	str	r2, [r3, #0]
	*(--thread_stack_top) = 0x03030303; // R3
 80003d2:	697b      	ldr	r3, [r7, #20]
 80003d4:	3b04      	subs	r3, #4
 80003d6:	617b      	str	r3, [r7, #20]
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80003de:	601a      	str	r2, [r3, #0]
	*(--thread_stack_top) = 0x02020202; // R2
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	3b04      	subs	r3, #4
 80003e4:	617b      	str	r3, [r7, #20]
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80003ec:	601a      	str	r2, [r3, #0]
	*(--thread_stack_top) = 0x01010101; // R1
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	3b04      	subs	r3, #4
 80003f2:	617b      	str	r3, [r7, #20]
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80003fa:	601a      	str	r2, [r3, #0]
	*(--thread_stack_top) = (uint32_t)NULL; // R0
 80003fc:	697b      	ldr	r3, [r7, #20]
 80003fe:	3b04      	subs	r3, #4
 8000400:	617b      	str	r3, [r7, #20]
 8000402:	697b      	ldr	r3, [r7, #20]
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]

	*(--thread_stack_top) = 0x11111111; // R11
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	3b04      	subs	r3, #4
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8000414:	601a      	str	r2, [r3, #0]
	*(--thread_stack_top) = 0x10101010; // R10
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	3b04      	subs	r3, #4
 800041a:	617b      	str	r3, [r7, #20]
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8000422:	601a      	str	r2, [r3, #0]
	*(--thread_stack_top) = 0x09090909; // R9
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	3b04      	subs	r3, #4
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8000430:	601a      	str	r2, [r3, #0]
	*(--thread_stack_top) = 0x08080808; // R8
 8000432:	697b      	ldr	r3, [r7, #20]
 8000434:	3b04      	subs	r3, #4
 8000436:	617b      	str	r3, [r7, #20]
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800043e:	601a      	str	r2, [r3, #0]
	*(--thread_stack_top) = 0x07070707; // R7
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	3b04      	subs	r3, #4
 8000444:	617b      	str	r3, [r7, #20]
 8000446:	697b      	ldr	r3, [r7, #20]
 8000448:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800044c:	601a      	str	r2, [r3, #0]
	*(--thread_stack_top) = 0x06060606; // R6
 800044e:	697b      	ldr	r3, [r7, #20]
 8000450:	3b04      	subs	r3, #4
 8000452:	617b      	str	r3, [r7, #20]
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800045a:	601a      	str	r2, [r3, #0]
	*(--thread_stack_top) = 0x05050505; // R5
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	3b04      	subs	r3, #4
 8000460:	617b      	str	r3, [r7, #20]
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8000468:	601a      	str	r2, [r3, #0]
	*(--thread_stack_top) = 0x04040404; // R4
 800046a:	697b      	ldr	r3, [r7, #20]
 800046c:	3b04      	subs	r3, #4
 800046e:	617b      	str	r3, [r7, #20]
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8000476:	601a      	str	r2, [r3, #0]

	*thread_sp = thread_stack_top;
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	697a      	ldr	r2, [r7, #20]
 800047c:	601a      	str	r2, [r3, #0]
}
 800047e:	bf00      	nop
 8000480:	371c      	adds	r7, #28
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
	...

0800048c <run_app>:

void run_app() {
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0

	GPIOA->BSRR = (0x1 << 5) << 0;
 8000490:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000494:	2220      	movs	r2, #32
 8000496:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = (0x1 << 1) << 0;
 8000498:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <run_app+0x58>)
 800049a:	2202      	movs	r2, #2
 800049c:	619a      	str	r2, [r3, #24]

	thread_is_running = 0;
 800049e:	4b12      	ldr	r3, [pc, #72]	; (80004e8 <run_app+0x5c>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
	current_thread = 0;
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <run_app+0x60>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]

	setup_stack(thread1_stack, &thread1_sp, thread1_func);
 80004aa:	4a11      	ldr	r2, [pc, #68]	; (80004f0 <run_app+0x64>)
 80004ac:	4911      	ldr	r1, [pc, #68]	; (80004f4 <run_app+0x68>)
 80004ae:	4812      	ldr	r0, [pc, #72]	; (80004f8 <run_app+0x6c>)
 80004b0:	f7ff ff6a 	bl	8000388 <setup_stack>
	setup_stack(thread2_stack, &thread2_sp, thread2_func);
 80004b4:	4a11      	ldr	r2, [pc, #68]	; (80004fc <run_app+0x70>)
 80004b6:	4912      	ldr	r1, [pc, #72]	; (8000500 <run_app+0x74>)
 80004b8:	4812      	ldr	r0, [pc, #72]	; (8000504 <run_app+0x78>)
 80004ba:	f7ff ff65 	bl	8000388 <setup_stack>

	scheduler_tick = 0;
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <run_app+0x7c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]


	SysTick->LOAD  = (uint32_t)(8000 * SCHEDULER_PERIOD_MS - 1);                         /* set reload register */
 80004c4:	4b11      	ldr	r3, [pc, #68]	; (800050c <run_app+0x80>)
 80004c6:	4a12      	ldr	r2, [pc, #72]	; (8000510 <run_app+0x84>)
 80004c8:	605a      	str	r2, [r3, #4]
	NVIC_SetPriority(SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004ca:	210f      	movs	r1, #15
 80004cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004d0:	f7ff feb2 	bl	8000238 <__NVIC_SetPriority>
	SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004d4:	4b0d      	ldr	r3, [pc, #52]	; (800050c <run_app+0x80>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
	SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <run_app+0x80>)
 80004dc:	2207      	movs	r2, #7
 80004de:	601a      	str	r2, [r3, #0]

	while(1) {
 80004e0:	e7fe      	b.n	80004e0 <run_app+0x54>
 80004e2:	bf00      	nop
 80004e4:	48000400 	.word	0x48000400
 80004e8:	2000002c 	.word	0x2000002c
 80004ec:	20000030 	.word	0x20000030
 80004f0:	080002b1 	.word	0x080002b1
 80004f4:	20000840 	.word	0x20000840
 80004f8:	20000440 	.word	0x20000440
 80004fc:	0800031d 	.word	0x0800031d
 8000500:	20000438 	.word	0x20000438
 8000504:	20000038 	.word	0x20000038
 8000508:	20000034 	.word	0x20000034
 800050c:	e000e010 	.word	0xe000e010
 8000510:	0001387f 	.word	0x0001387f

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fa38 	bl	800098c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f807 	bl	800052e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f870 	bl	8000604 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000524:	f000 f83e 	bl	80005a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  run_app();
 8000528:	f7ff ffb0 	bl	800048c <run_app>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x18>

0800052e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b090      	sub	sp, #64	; 0x40
 8000532:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000534:	f107 0318 	add.w	r3, r7, #24
 8000538:	2228      	movs	r2, #40	; 0x28
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f002 fd80 	bl	8003042 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000550:	2302      	movs	r3, #2
 8000552:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000558:	2310      	movs	r3, #16
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800055c:	2300      	movs	r3, #0
 800055e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000560:	f107 0318 	add.w	r3, r7, #24
 8000564:	4618      	mov	r0, r3
 8000566:	f000 fcb3 	bl	8000ed0 <HAL_RCC_OscConfig>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000570:	f000 f8ba 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000574:	230f      	movs	r3, #15
 8000576:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2100      	movs	r1, #0
 800058c:	4618      	mov	r0, r3
 800058e:	f001 fcdd 	bl	8001f4c <HAL_RCC_ClockConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000598:	f000 f8a6 	bl	80006e8 <Error_Handler>
  }
}
 800059c:	bf00      	nop
 800059e:	3740      	adds	r7, #64	; 0x40
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005aa:	4a15      	ldr	r2, [pc, #84]	; (8000600 <MX_USART2_UART_Init+0x5c>)
 80005ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005b0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80005b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005b6:	4b11      	ldr	r3, [pc, #68]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005ca:	220c      	movs	r2, #12
 80005cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ce:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d4:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005da:	4b08      	ldr	r3, [pc, #32]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005dc:	2200      	movs	r2, #0
 80005de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <MX_USART2_UART_Init+0x58>)
 80005e8:	f002 f98c 	bl	8002904 <HAL_UART_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005f2:	f000 f879 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000844 	.word	0x20000844
 8000600:	40004400 	.word	0x40004400

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800061a:	4b28      	ldr	r3, [pc, #160]	; (80006bc <MX_GPIO_Init+0xb8>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a27      	ldr	r2, [pc, #156]	; (80006bc <MX_GPIO_Init+0xb8>)
 8000620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b25      	ldr	r3, [pc, #148]	; (80006bc <MX_GPIO_Init+0xb8>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000632:	4b22      	ldr	r3, [pc, #136]	; (80006bc <MX_GPIO_Init+0xb8>)
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	4a21      	ldr	r2, [pc, #132]	; (80006bc <MX_GPIO_Init+0xb8>)
 8000638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800063c:	6153      	str	r3, [r2, #20]
 800063e:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <MX_GPIO_Init+0xb8>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b1c      	ldr	r3, [pc, #112]	; (80006bc <MX_GPIO_Init+0xb8>)
 800064c:	695b      	ldr	r3, [r3, #20]
 800064e:	4a1b      	ldr	r2, [pc, #108]	; (80006bc <MX_GPIO_Init+0xb8>)
 8000650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000654:	6153      	str	r3, [r2, #20]
 8000656:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_GPIO_Init+0xb8>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(THR1_LED_GPIO_Port, THR1_LED_Pin, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2120      	movs	r1, #32
 8000666:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066a:	f000 fc19 	bl	8000ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(THR2_LED_GPIO_Port, THR2_LED_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2102      	movs	r1, #2
 8000672:	4813      	ldr	r0, [pc, #76]	; (80006c0 <MX_GPIO_Init+0xbc>)
 8000674:	f000 fc14 	bl	8000ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : THR1_LED_Pin */
  GPIO_InitStruct.Pin = THR1_LED_Pin;
 8000678:	2320      	movs	r3, #32
 800067a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(THR1_LED_GPIO_Port, &GPIO_InitStruct);
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4619      	mov	r1, r3
 800068e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000692:	f000 fa93 	bl	8000bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : THR2_LED_Pin */
  GPIO_InitStruct.Pin = THR2_LED_Pin;
 8000696:	2302      	movs	r3, #2
 8000698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(THR2_LED_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 030c 	add.w	r3, r7, #12
 80006aa:	4619      	mov	r1, r3
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <MX_GPIO_Init+0xbc>)
 80006ae:	f000 fa85 	bl	8000bbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b2:	bf00      	nop
 80006b4:	3720      	adds	r7, #32
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40021000 	.word	0x40021000
 80006c0:	48000400 	.word	0x48000400

080006c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d101      	bne.n	80006da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006d6:	f000 f96f 	bl	80009b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40000400 	.word	0x40000400

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <Error_Handler+0x8>
	...

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <HAL_MspInit+0x44>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <HAL_MspInit+0x44>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_MspInit+0x44>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <HAL_MspInit+0x44>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	4a08      	ldr	r2, [pc, #32]	; (8000738 <HAL_MspInit+0x44>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	61d3      	str	r3, [r2, #28]
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <HAL_MspInit+0x44>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40021000 	.word	0x40021000

0800073c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a18      	ldr	r2, [pc, #96]	; (80007bc <HAL_UART_MspInit+0x80>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d129      	bne.n	80007b2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <HAL_UART_MspInit+0x84>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	4a17      	ldr	r2, [pc, #92]	; (80007c0 <HAL_UART_MspInit+0x84>)
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	61d3      	str	r3, [r2, #28]
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_UART_MspInit+0x84>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_UART_MspInit+0x84>)
 8000778:	695b      	ldr	r3, [r3, #20]
 800077a:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <HAL_UART_MspInit+0x84>)
 800077c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000780:	6153      	str	r3, [r2, #20]
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_UART_MspInit+0x84>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800078e:	f248 0304 	movw	r3, #32772	; 0x8004
 8000792:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007a0:	2307      	movs	r3, #7
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ae:	f000 fa05 	bl	8000bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007b2:	bf00      	nop
 80007b4:	3728      	adds	r7, #40	; 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40004400 	.word	0x40004400
 80007c0:	40021000 	.word	0x40021000

080007c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08e      	sub	sp, #56	; 0x38
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80007d4:	4b33      	ldr	r3, [pc, #204]	; (80008a4 <HAL_InitTick+0xe0>)
 80007d6:	69db      	ldr	r3, [r3, #28]
 80007d8:	4a32      	ldr	r2, [pc, #200]	; (80008a4 <HAL_InitTick+0xe0>)
 80007da:	f043 0302 	orr.w	r3, r3, #2
 80007de:	61d3      	str	r3, [r2, #28]
 80007e0:	4b30      	ldr	r3, [pc, #192]	; (80008a4 <HAL_InitTick+0xe0>)
 80007e2:	69db      	ldr	r3, [r3, #28]
 80007e4:	f003 0302 	and.w	r3, r3, #2
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007ec:	f107 0210 	add.w	r2, r7, #16
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 fdc8 	bl	800238c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007fc:	6a3b      	ldr	r3, [r7, #32]
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000802:	2b00      	cmp	r3, #0
 8000804:	d103      	bne.n	800080e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000806:	f001 fd7d 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 800080a:	6378      	str	r0, [r7, #52]	; 0x34
 800080c:	e004      	b.n	8000818 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800080e:	f001 fd79 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 8000812:	4603      	mov	r3, r0
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800081a:	4a23      	ldr	r2, [pc, #140]	; (80008a8 <HAL_InitTick+0xe4>)
 800081c:	fba2 2303 	umull	r2, r3, r2, r3
 8000820:	0c9b      	lsrs	r3, r3, #18
 8000822:	3b01      	subs	r3, #1
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000826:	4b21      	ldr	r3, [pc, #132]	; (80008ac <HAL_InitTick+0xe8>)
 8000828:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <HAL_InitTick+0xec>)
 800082a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <HAL_InitTick+0xe8>)
 800082e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000832:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000834:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <HAL_InitTick+0xe8>)
 8000836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000838:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 800083a:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <HAL_InitTick+0xe8>)
 800083c:	2200      	movs	r2, #0
 800083e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <HAL_InitTick+0xe8>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000846:	4b19      	ldr	r3, [pc, #100]	; (80008ac <HAL_InitTick+0xe8>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800084c:	4817      	ldr	r0, [pc, #92]	; (80008ac <HAL_InitTick+0xe8>)
 800084e:	f001 fdcf 	bl	80023f0 <HAL_TIM_Base_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000858:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800085c:	2b00      	cmp	r3, #0
 800085e:	d11b      	bne.n	8000898 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000860:	4812      	ldr	r0, [pc, #72]	; (80008ac <HAL_InitTick+0xe8>)
 8000862:	f001 fe27 	bl	80024b4 <HAL_TIM_Base_Start_IT>
 8000866:	4603      	mov	r3, r0
 8000868:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800086c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000870:	2b00      	cmp	r3, #0
 8000872:	d111      	bne.n	8000898 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000874:	201d      	movs	r0, #29
 8000876:	f000 f993 	bl	8000ba0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b0f      	cmp	r3, #15
 800087e:	d808      	bhi.n	8000892 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000880:	2200      	movs	r2, #0
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	201d      	movs	r0, #29
 8000886:	f000 f96f 	bl	8000b68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <HAL_InitTick+0xf0>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	e002      	b.n	8000898 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000892:	2301      	movs	r3, #1
 8000894:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000898:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800089c:	4618      	mov	r0, r3
 800089e:	3738      	adds	r7, #56	; 0x38
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	40021000 	.word	0x40021000
 80008a8:	431bde83 	.word	0x431bde83
 80008ac:	200008cc 	.word	0x200008cc
 80008b0:	40000400 	.word	0x40000400
 80008b4:	20000004 	.word	0x20000004

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <MemManage_Handler+0x4>

080008ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */
  //pendsv();
  /* USER CODE END PendSV_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <TIM3_IRQHandler+0x10>)
 8000906:	f001 fe31 	bl	800256c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200008cc 	.word	0x200008cc

08000914 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <SystemInit+0x20>)
 800091a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091e:	4a05      	ldr	r2, [pc, #20]	; (8000934 <SystemInit+0x20>)
 8000920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000924:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	e000ed00 	.word	0xe000ed00

08000938 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000970 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800093c:	f7ff ffea 	bl	8000914 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000940:	480c      	ldr	r0, [pc, #48]	; (8000974 <LoopForever+0x6>)
  ldr r1, =_edata
 8000942:	490d      	ldr	r1, [pc, #52]	; (8000978 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000944:	4a0d      	ldr	r2, [pc, #52]	; (800097c <LoopForever+0xe>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000958:	4c0a      	ldr	r4, [pc, #40]	; (8000984 <LoopForever+0x16>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000966:	f002 fb75 	bl	8003054 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800096a:	f7ff fdd3 	bl	8000514 <main>

0800096e <LoopForever>:

LoopForever:
    b LoopForever
 800096e:	e7fe      	b.n	800096e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000970:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000974:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000978:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800097c:	080030f4 	.word	0x080030f4
  ldr r2, =_sbss
 8000980:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000984:	2000091c 	.word	0x2000091c

08000988 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000988:	e7fe      	b.n	8000988 <ADC1_2_IRQHandler>
	...

0800098c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <HAL_Init+0x28>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a07      	ldr	r2, [pc, #28]	; (80009b4 <HAL_Init+0x28>)
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800099c:	2003      	movs	r0, #3
 800099e:	f000 f8d8 	bl	8000b52 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009a2:	200f      	movs	r0, #15
 80009a4:	f7ff ff0e 	bl	80007c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a8:	f7ff fea4 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40022000 	.word	0x40022000

080009b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x20>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	461a      	mov	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_IncTick+0x24>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4413      	add	r3, r2
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <HAL_IncTick+0x24>)
 80009ca:	6013      	str	r3, [r2, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008
 80009dc:	20000918 	.word	0x20000918

080009e0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return uwTick;  
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <HAL_GetTick+0x14>)
 80009e6:	681b      	ldr	r3, [r3, #0]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000918 	.word	0x20000918

080009f8 <__NVIC_SetPriorityGrouping>:
{
 80009f8:	b480      	push	{r7}
 80009fa:	b085      	sub	sp, #20
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a2a:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <__NVIC_SetPriorityGrouping+0x44>)
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	60d3      	str	r3, [r2, #12]
}
 8000a30:	bf00      	nop
 8000a32:	3714      	adds	r7, #20
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_GetPriorityGrouping>:
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a44:	4b04      	ldr	r3, [pc, #16]	; (8000a58 <__NVIC_GetPriorityGrouping+0x18>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	f003 0307 	and.w	r3, r3, #7
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <__NVIC_EnableIRQ>:
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	db0b      	blt.n	8000a86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	f003 021f 	and.w	r2, r3, #31
 8000a74:	4907      	ldr	r1, [pc, #28]	; (8000a94 <__NVIC_EnableIRQ+0x38>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	095b      	lsrs	r3, r3, #5
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000e100 	.word	0xe000e100

08000a98 <__NVIC_SetPriority>:
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	6039      	str	r1, [r7, #0]
 8000aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	db0a      	blt.n	8000ac2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	490c      	ldr	r1, [pc, #48]	; (8000ae4 <__NVIC_SetPriority+0x4c>)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	0112      	lsls	r2, r2, #4
 8000ab8:	b2d2      	uxtb	r2, r2
 8000aba:	440b      	add	r3, r1
 8000abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ac0:	e00a      	b.n	8000ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	4908      	ldr	r1, [pc, #32]	; (8000ae8 <__NVIC_SetPriority+0x50>)
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	f003 030f 	and.w	r3, r3, #15
 8000ace:	3b04      	subs	r3, #4
 8000ad0:	0112      	lsls	r2, r2, #4
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	761a      	strb	r2, [r3, #24]
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000e100 	.word	0xe000e100
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b089      	sub	sp, #36	; 0x24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	f1c3 0307 	rsb	r3, r3, #7
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	bf28      	it	cs
 8000b0a:	2304      	movcs	r3, #4
 8000b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3304      	adds	r3, #4
 8000b12:	2b06      	cmp	r3, #6
 8000b14:	d902      	bls.n	8000b1c <NVIC_EncodePriority+0x30>
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	3b03      	subs	r3, #3
 8000b1a:	e000      	b.n	8000b1e <NVIC_EncodePriority+0x32>
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	401a      	ands	r2, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3e:	43d9      	mvns	r1, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	4313      	orrs	r3, r2
         );
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3724      	adds	r7, #36	; 0x24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ff4c 	bl	80009f8 <__NVIC_SetPriorityGrouping>
}
 8000b60:	bf00      	nop
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b7a:	f7ff ff61 	bl	8000a40 <__NVIC_GetPriorityGrouping>
 8000b7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	68b9      	ldr	r1, [r7, #8]
 8000b84:	6978      	ldr	r0, [r7, #20]
 8000b86:	f7ff ffb1 	bl	8000aec <NVIC_EncodePriority>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff80 	bl	8000a98 <__NVIC_SetPriority>
}
 8000b98:	bf00      	nop
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff54 	bl	8000a5c <__NVIC_EnableIRQ>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b087      	sub	sp, #28
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bca:	e14e      	b.n	8000e6a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 8140 	beq.w	8000e64 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d005      	beq.n	8000bfc <HAL_GPIO_Init+0x40>
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 0303 	and.w	r3, r3, #3
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d130      	bne.n	8000c5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c32:	2201      	movs	r2, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	091b      	lsrs	r3, r3, #4
 8000c48:	f003 0201 	and.w	r2, r3, #1
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d017      	beq.n	8000c9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 0303 	and.w	r3, r3, #3
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d123      	bne.n	8000cee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	08da      	lsrs	r2, r3, #3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3208      	adds	r2, #8
 8000cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	693a      	ldr	r2, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	691a      	ldr	r2, [r3, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f003 0307 	and.w	r3, r3, #7
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	08da      	lsrs	r2, r3, #3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3208      	adds	r2, #8
 8000ce8:	6939      	ldr	r1, [r7, #16]
 8000cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 0203 	and.w	r2, r3, #3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f000 809a 	beq.w	8000e64 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d30:	4b55      	ldr	r3, [pc, #340]	; (8000e88 <HAL_GPIO_Init+0x2cc>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a54      	ldr	r2, [pc, #336]	; (8000e88 <HAL_GPIO_Init+0x2cc>)
 8000d36:	f043 0301 	orr.w	r3, r3, #1
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b52      	ldr	r3, [pc, #328]	; (8000e88 <HAL_GPIO_Init+0x2cc>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d48:	4a50      	ldr	r2, [pc, #320]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	220f      	movs	r2, #15
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d72:	d013      	beq.n	8000d9c <HAL_GPIO_Init+0x1e0>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a46      	ldr	r2, [pc, #280]	; (8000e90 <HAL_GPIO_Init+0x2d4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d00d      	beq.n	8000d98 <HAL_GPIO_Init+0x1dc>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a45      	ldr	r2, [pc, #276]	; (8000e94 <HAL_GPIO_Init+0x2d8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d007      	beq.n	8000d94 <HAL_GPIO_Init+0x1d8>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a44      	ldr	r2, [pc, #272]	; (8000e98 <HAL_GPIO_Init+0x2dc>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d101      	bne.n	8000d90 <HAL_GPIO_Init+0x1d4>
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e006      	b.n	8000d9e <HAL_GPIO_Init+0x1e2>
 8000d90:	2305      	movs	r3, #5
 8000d92:	e004      	b.n	8000d9e <HAL_GPIO_Init+0x1e2>
 8000d94:	2302      	movs	r3, #2
 8000d96:	e002      	b.n	8000d9e <HAL_GPIO_Init+0x1e2>
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e000      	b.n	8000d9e <HAL_GPIO_Init+0x1e2>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	697a      	ldr	r2, [r7, #20]
 8000da0:	f002 0203 	and.w	r2, r2, #3
 8000da4:	0092      	lsls	r2, r2, #2
 8000da6:	4093      	lsls	r3, r2
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dae:	4937      	ldr	r1, [pc, #220]	; (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	3302      	adds	r3, #2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dbc:	4b37      	ldr	r3, [pc, #220]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	43db      	mvns	r3, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000de0:	4a2e      	ldr	r2, [pc, #184]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000de6:	4b2d      	ldr	r3, [pc, #180]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	43db      	mvns	r3, r3
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	4013      	ands	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e0a:	4a24      	ldr	r2, [pc, #144]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e10:	4b22      	ldr	r3, [pc, #136]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d003      	beq.n	8000e34 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e34:	4a19      	ldr	r2, [pc, #100]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	43db      	mvns	r3, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4013      	ands	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d003      	beq.n	8000e5e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <HAL_GPIO_Init+0x2e0>)
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	3301      	adds	r3, #1
 8000e68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	fa22 f303 	lsr.w	r3, r2, r3
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f47f aea9 	bne.w	8000bcc <HAL_GPIO_Init+0x10>
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	bf00      	nop
 8000e7e:	371c      	adds	r7, #28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000
 8000e90:	48000400 	.word	0x48000400
 8000e94:	48000800 	.word	0x48000800
 8000e98:	48000c00 	.word	0x48000c00
 8000e9c:	40010400 	.word	0x40010400

08000ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
 8000eac:	4613      	mov	r3, r2
 8000eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eb0:	787b      	ldrb	r3, [r7, #1]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000edc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ee0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ee6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d102      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	f001 b823 	b.w	8001f3c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000efa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	f000 817d 	beq.w	8001206 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f0c:	4bbc      	ldr	r3, [pc, #752]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 030c 	and.w	r3, r3, #12
 8000f14:	2b04      	cmp	r3, #4
 8000f16:	d00c      	beq.n	8000f32 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f18:	4bb9      	ldr	r3, [pc, #740]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d15c      	bne.n	8000fde <HAL_RCC_OscConfig+0x10e>
 8000f24:	4bb6      	ldr	r3, [pc, #728]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f30:	d155      	bne.n	8000fde <HAL_RCC_OscConfig+0x10e>
 8000f32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f36:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f3a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000f3e:	fa93 f3a3 	rbit	r3, r3
 8000f42:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f46:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f4a:	fab3 f383 	clz	r3, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	095b      	lsrs	r3, r3, #5
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d102      	bne.n	8000f64 <HAL_RCC_OscConfig+0x94>
 8000f5e:	4ba8      	ldr	r3, [pc, #672]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	e015      	b.n	8000f90 <HAL_RCC_OscConfig+0xc0>
 8000f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f68:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f70:	fa93 f3a3 	rbit	r3, r3
 8000f74:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f80:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f84:	fa93 f3a3 	rbit	r3, r3
 8000f88:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f8c:	4b9c      	ldr	r3, [pc, #624]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f94:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f98:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f9c:	fa92 f2a2 	rbit	r2, r2
 8000fa0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000fa4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000fa8:	fab2 f282 	clz	r2, r2
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	f042 0220 	orr.w	r2, r2, #32
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	f002 021f 	and.w	r2, r2, #31
 8000fb8:	2101      	movs	r1, #1
 8000fba:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 811f 	beq.w	8001204 <HAL_RCC_OscConfig+0x334>
 8000fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f040 8116 	bne.w	8001204 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	f000 bfaf 	b.w	8001f3c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fee:	d106      	bne.n	8000ffe <HAL_RCC_OscConfig+0x12e>
 8000ff0:	4b83      	ldr	r3, [pc, #524]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a82      	ldr	r2, [pc, #520]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8000ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffa:	6013      	str	r3, [r2, #0]
 8000ffc:	e036      	b.n	800106c <HAL_RCC_OscConfig+0x19c>
 8000ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001002:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0x158>
 800100e:	4b7c      	ldr	r3, [pc, #496]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a7b      	ldr	r2, [pc, #492]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8001014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b79      	ldr	r3, [pc, #484]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a78      	ldr	r2, [pc, #480]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8001020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e021      	b.n	800106c <HAL_RCC_OscConfig+0x19c>
 8001028:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800102c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001038:	d10c      	bne.n	8001054 <HAL_RCC_OscConfig+0x184>
 800103a:	4b71      	ldr	r3, [pc, #452]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a70      	ldr	r2, [pc, #448]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8001040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	4b6e      	ldr	r3, [pc, #440]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a6d      	ldr	r2, [pc, #436]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 800104c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e00b      	b.n	800106c <HAL_RCC_OscConfig+0x19c>
 8001054:	4b6a      	ldr	r3, [pc, #424]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a69      	ldr	r2, [pc, #420]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 800105a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b67      	ldr	r3, [pc, #412]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a66      	ldr	r2, [pc, #408]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8001066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800106c:	4b64      	ldr	r3, [pc, #400]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	f023 020f 	bic.w	r2, r3, #15
 8001074:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001078:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	495f      	ldr	r1, [pc, #380]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8001082:	4313      	orrs	r3, r2
 8001084:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001086:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800108a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d059      	beq.n	800114a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001096:	f7ff fca3 	bl	80009e0 <HAL_GetTick>
 800109a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800109e:	e00a      	b.n	80010b6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a0:	f7ff fc9e 	bl	80009e0 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b64      	cmp	r3, #100	; 0x64
 80010ae:	d902      	bls.n	80010b6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	f000 bf43 	b.w	8001f3c <HAL_RCC_OscConfig+0x106c>
 80010b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80010ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ce:	fab3 f383 	clz	r3, r3
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	095b      	lsrs	r3, r3, #5
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d102      	bne.n	80010e8 <HAL_RCC_OscConfig+0x218>
 80010e2:	4b47      	ldr	r3, [pc, #284]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	e015      	b.n	8001114 <HAL_RCC_OscConfig+0x244>
 80010e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ec:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010f4:	fa93 f3a3 	rbit	r3, r3
 80010f8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001100:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001104:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001108:	fa93 f3a3 	rbit	r3, r3
 800110c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001110:	4b3b      	ldr	r3, [pc, #236]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001118:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800111c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001120:	fa92 f2a2 	rbit	r2, r2
 8001124:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001128:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800112c:	fab2 f282 	clz	r2, r2
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	f042 0220 	orr.w	r2, r2, #32
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	f002 021f 	and.w	r2, r2, #31
 800113c:	2101      	movs	r1, #1
 800113e:	fa01 f202 	lsl.w	r2, r1, r2
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0ab      	beq.n	80010a0 <HAL_RCC_OscConfig+0x1d0>
 8001148:	e05d      	b.n	8001206 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff fc49 	bl	80009e0 <HAL_GetTick>
 800114e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001152:	e00a      	b.n	800116a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fc44 	bl	80009e0 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b64      	cmp	r3, #100	; 0x64
 8001162:	d902      	bls.n	800116a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	f000 bee9 	b.w	8001f3c <HAL_RCC_OscConfig+0x106c>
 800116a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800116e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800117e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001182:	fab3 f383 	clz	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	095b      	lsrs	r3, r3, #5
 800118a:	b2db      	uxtb	r3, r3
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b01      	cmp	r3, #1
 8001194:	d102      	bne.n	800119c <HAL_RCC_OscConfig+0x2cc>
 8001196:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	e015      	b.n	80011c8 <HAL_RCC_OscConfig+0x2f8>
 800119c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80011a8:	fa93 f3a3 	rbit	r3, r3
 80011ac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80011b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011b8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80011bc:	fa93 f3a3 	rbit	r3, r3
 80011c0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_RCC_OscConfig+0x330>)
 80011c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011cc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80011d0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011d4:	fa92 f2a2 	rbit	r2, r2
 80011d8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80011dc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80011e0:	fab2 f282 	clz	r2, r2
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	f042 0220 	orr.w	r2, r2, #32
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	f002 021f 	and.w	r2, r2, #31
 80011f0:	2101      	movs	r1, #1
 80011f2:	fa01 f202 	lsl.w	r2, r1, r2
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1ab      	bne.n	8001154 <HAL_RCC_OscConfig+0x284>
 80011fc:	e003      	b.n	8001206 <HAL_RCC_OscConfig+0x336>
 80011fe:	bf00      	nop
 8001200:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800120a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 817d 	beq.w	8001516 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800121c:	4ba6      	ldr	r3, [pc, #664]	; (80014b8 <HAL_RCC_OscConfig+0x5e8>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 030c 	and.w	r3, r3, #12
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00b      	beq.n	8001240 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001228:	4ba3      	ldr	r3, [pc, #652]	; (80014b8 <HAL_RCC_OscConfig+0x5e8>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b08      	cmp	r3, #8
 8001232:	d172      	bne.n	800131a <HAL_RCC_OscConfig+0x44a>
 8001234:	4ba0      	ldr	r3, [pc, #640]	; (80014b8 <HAL_RCC_OscConfig+0x5e8>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d16c      	bne.n	800131a <HAL_RCC_OscConfig+0x44a>
 8001240:	2302      	movs	r3, #2
 8001242:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800124a:	fa93 f3a3 	rbit	r3, r3
 800124e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001252:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001256:	fab3 f383 	clz	r3, r3
 800125a:	b2db      	uxtb	r3, r3
 800125c:	095b      	lsrs	r3, r3, #5
 800125e:	b2db      	uxtb	r3, r3
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b01      	cmp	r3, #1
 8001268:	d102      	bne.n	8001270 <HAL_RCC_OscConfig+0x3a0>
 800126a:	4b93      	ldr	r3, [pc, #588]	; (80014b8 <HAL_RCC_OscConfig+0x5e8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	e013      	b.n	8001298 <HAL_RCC_OscConfig+0x3c8>
 8001270:	2302      	movs	r3, #2
 8001272:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001276:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800127a:	fa93 f3a3 	rbit	r3, r3
 800127e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001282:	2302      	movs	r3, #2
 8001284:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001288:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800128c:	fa93 f3a3 	rbit	r3, r3
 8001290:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001294:	4b88      	ldr	r3, [pc, #544]	; (80014b8 <HAL_RCC_OscConfig+0x5e8>)
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	2202      	movs	r2, #2
 800129a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800129e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80012a2:	fa92 f2a2 	rbit	r2, r2
 80012a6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80012aa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80012ae:	fab2 f282 	clz	r2, r2
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	f042 0220 	orr.w	r2, r2, #32
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	f002 021f 	and.w	r2, r2, #31
 80012be:	2101      	movs	r1, #1
 80012c0:	fa01 f202 	lsl.w	r2, r1, r2
 80012c4:	4013      	ands	r3, r2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00a      	beq.n	80012e0 <HAL_RCC_OscConfig+0x410>
 80012ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d002      	beq.n	80012e0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	f000 be2e 	b.w	8001f3c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e0:	4b75      	ldr	r3, [pc, #468]	; (80014b8 <HAL_RCC_OscConfig+0x5e8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	695b      	ldr	r3, [r3, #20]
 80012f4:	21f8      	movs	r1, #248	; 0xf8
 80012f6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012fe:	fa91 f1a1 	rbit	r1, r1
 8001302:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001306:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800130a:	fab1 f181 	clz	r1, r1
 800130e:	b2c9      	uxtb	r1, r1
 8001310:	408b      	lsls	r3, r1
 8001312:	4969      	ldr	r1, [pc, #420]	; (80014b8 <HAL_RCC_OscConfig+0x5e8>)
 8001314:	4313      	orrs	r3, r2
 8001316:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001318:	e0fd      	b.n	8001516 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800131a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f000 8088 	beq.w	800143c <HAL_RCC_OscConfig+0x56c>
 800132c:	2301      	movs	r3, #1
 800132e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001332:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001336:	fa93 f3a3 	rbit	r3, r3
 800133a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800133e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001342:	fab3 f383 	clz	r3, r3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800134c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	461a      	mov	r2, r3
 8001354:	2301      	movs	r3, #1
 8001356:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fb42 	bl	80009e0 <HAL_GetTick>
 800135c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	e00a      	b.n	8001378 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001362:	f7ff fb3d 	bl	80009e0 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d902      	bls.n	8001378 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	f000 bde2 	b.w	8001f3c <HAL_RCC_OscConfig+0x106c>
 8001378:	2302      	movs	r3, #2
 800137a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800137e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001382:	fa93 f3a3 	rbit	r3, r3
 8001386:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800138a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138e:	fab3 f383 	clz	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	095b      	lsrs	r3, r3, #5
 8001396:	b2db      	uxtb	r3, r3
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d102      	bne.n	80013a8 <HAL_RCC_OscConfig+0x4d8>
 80013a2:	4b45      	ldr	r3, [pc, #276]	; (80014b8 <HAL_RCC_OscConfig+0x5e8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	e013      	b.n	80013d0 <HAL_RCC_OscConfig+0x500>
 80013a8:	2302      	movs	r3, #2
 80013aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80013b2:	fa93 f3a3 	rbit	r3, r3
 80013b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80013c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80013c4:	fa93 f3a3 	rbit	r3, r3
 80013c8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80013cc:	4b3a      	ldr	r3, [pc, #232]	; (80014b8 <HAL_RCC_OscConfig+0x5e8>)
 80013ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d0:	2202      	movs	r2, #2
 80013d2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80013d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013da:	fa92 f2a2 	rbit	r2, r2
 80013de:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80013e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80013e6:	fab2 f282 	clz	r2, r2
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	f042 0220 	orr.w	r2, r2, #32
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	f002 021f 	and.w	r2, r2, #31
 80013f6:	2101      	movs	r1, #1
 80013f8:	fa01 f202 	lsl.w	r2, r1, r2
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0af      	beq.n	8001362 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001402:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <HAL_RCC_OscConfig+0x5e8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800140a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800140e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	21f8      	movs	r1, #248	; 0xf8
 8001418:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800141c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001420:	fa91 f1a1 	rbit	r1, r1
 8001424:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001428:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800142c:	fab1 f181 	clz	r1, r1
 8001430:	b2c9      	uxtb	r1, r1
 8001432:	408b      	lsls	r3, r1
 8001434:	4920      	ldr	r1, [pc, #128]	; (80014b8 <HAL_RCC_OscConfig+0x5e8>)
 8001436:	4313      	orrs	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
 800143a:	e06c      	b.n	8001516 <HAL_RCC_OscConfig+0x646>
 800143c:	2301      	movs	r3, #1
 800143e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001442:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001446:	fa93 f3a3 	rbit	r3, r3
 800144a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800144e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001452:	fab3 f383 	clz	r3, r3
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800145c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	461a      	mov	r2, r3
 8001464:	2300      	movs	r3, #0
 8001466:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff faba 	bl	80009e0 <HAL_GetTick>
 800146c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001470:	e00a      	b.n	8001488 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001472:	f7ff fab5 	bl	80009e0 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d902      	bls.n	8001488 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	f000 bd5a 	b.w	8001f3c <HAL_RCC_OscConfig+0x106c>
 8001488:	2302      	movs	r3, #2
 800148a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800148e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001492:	fa93 f3a3 	rbit	r3, r3
 8001496:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800149a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	fab3 f383 	clz	r3, r3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	095b      	lsrs	r3, r3, #5
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d104      	bne.n	80014bc <HAL_RCC_OscConfig+0x5ec>
 80014b2:	4b01      	ldr	r3, [pc, #4]	; (80014b8 <HAL_RCC_OscConfig+0x5e8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	e015      	b.n	80014e4 <HAL_RCC_OscConfig+0x614>
 80014b8:	40021000 	.word	0x40021000
 80014bc:	2302      	movs	r3, #2
 80014be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80014ce:	2302      	movs	r3, #2
 80014d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80014d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80014e0:	4bc8      	ldr	r3, [pc, #800]	; (8001804 <HAL_RCC_OscConfig+0x934>)
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	2202      	movs	r2, #2
 80014e6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80014ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014ee:	fa92 f2a2 	rbit	r2, r2
 80014f2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80014f6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014fa:	fab2 f282 	clz	r2, r2
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	f042 0220 	orr.w	r2, r2, #32
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	f002 021f 	and.w	r2, r2, #31
 800150a:	2101      	movs	r1, #1
 800150c:	fa01 f202 	lsl.w	r2, r1, r2
 8001510:	4013      	ands	r3, r2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1ad      	bne.n	8001472 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0308 	and.w	r3, r3, #8
 8001526:	2b00      	cmp	r3, #0
 8001528:	f000 8110 	beq.w	800174c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800152c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001530:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d079      	beq.n	8001630 <HAL_RCC_OscConfig+0x760>
 800153c:	2301      	movs	r3, #1
 800153e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001546:	fa93 f3a3 	rbit	r3, r3
 800154a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800154e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001552:	fab3 f383 	clz	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	4bab      	ldr	r3, [pc, #684]	; (8001808 <HAL_RCC_OscConfig+0x938>)
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	461a      	mov	r2, r3
 8001562:	2301      	movs	r3, #1
 8001564:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001566:	f7ff fa3b 	bl	80009e0 <HAL_GetTick>
 800156a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156e:	e00a      	b.n	8001586 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001570:	f7ff fa36 	bl	80009e0 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d902      	bls.n	8001586 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	f000 bcdb 	b.w	8001f3c <HAL_RCC_OscConfig+0x106c>
 8001586:	2302      	movs	r3, #2
 8001588:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800158c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001590:	fa93 f3a3 	rbit	r3, r3
 8001594:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001598:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015a0:	2202      	movs	r2, #2
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	fa93 f2a3 	rbit	r2, r3
 80015b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015c4:	2202      	movs	r2, #2
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	fa93 f2a3 	rbit	r2, r3
 80015d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e0:	4b88      	ldr	r3, [pc, #544]	; (8001804 <HAL_RCC_OscConfig+0x934>)
 80015e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015ec:	2102      	movs	r1, #2
 80015ee:	6019      	str	r1, [r3, #0]
 80015f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	fa93 f1a3 	rbit	r1, r3
 80015fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001602:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001606:	6019      	str	r1, [r3, #0]
  return result;
 8001608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	fab3 f383 	clz	r3, r3
 8001616:	b2db      	uxtb	r3, r3
 8001618:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800161c:	b2db      	uxtb	r3, r3
 800161e:	f003 031f 	and.w	r3, r3, #31
 8001622:	2101      	movs	r1, #1
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	4013      	ands	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0a0      	beq.n	8001570 <HAL_RCC_OscConfig+0x6a0>
 800162e:	e08d      	b.n	800174c <HAL_RCC_OscConfig+0x87c>
 8001630:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001634:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001638:	2201      	movs	r2, #1
 800163a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001640:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	fa93 f2a3 	rbit	r2, r3
 800164a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800164e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001652:	601a      	str	r2, [r3, #0]
  return result;
 8001654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001658:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800165c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165e:	fab3 f383 	clz	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	461a      	mov	r2, r3
 8001666:	4b68      	ldr	r3, [pc, #416]	; (8001808 <HAL_RCC_OscConfig+0x938>)
 8001668:	4413      	add	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	461a      	mov	r2, r3
 800166e:	2300      	movs	r3, #0
 8001670:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001672:	f7ff f9b5 	bl	80009e0 <HAL_GetTick>
 8001676:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167a:	e00a      	b.n	8001692 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff f9b0 	bl	80009e0 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d902      	bls.n	8001692 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	f000 bc55 	b.w	8001f3c <HAL_RCC_OscConfig+0x106c>
 8001692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001696:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800169a:	2202      	movs	r2, #2
 800169c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	fa93 f2a3 	rbit	r2, r3
 80016ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016be:	2202      	movs	r2, #2
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	fa93 f2a3 	rbit	r2, r3
 80016d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016e2:	2202      	movs	r2, #2
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	fa93 f2a3 	rbit	r2, r3
 80016f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016fe:	4b41      	ldr	r3, [pc, #260]	; (8001804 <HAL_RCC_OscConfig+0x934>)
 8001700:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001706:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800170a:	2102      	movs	r1, #2
 800170c:	6019      	str	r1, [r3, #0]
 800170e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001712:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	fa93 f1a3 	rbit	r1, r3
 800171c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001720:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001724:	6019      	str	r1, [r3, #0]
  return result;
 8001726:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	fab3 f383 	clz	r3, r3
 8001734:	b2db      	uxtb	r3, r3
 8001736:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f003 031f 	and.w	r3, r3, #31
 8001740:	2101      	movs	r1, #1
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	4013      	ands	r3, r2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d197      	bne.n	800167c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	2b00      	cmp	r3, #0
 800175e:	f000 81a1 	beq.w	8001aa4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001768:	4b26      	ldr	r3, [pc, #152]	; (8001804 <HAL_RCC_OscConfig+0x934>)
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d116      	bne.n	80017a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <HAL_RCC_OscConfig+0x934>)
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	4a22      	ldr	r2, [pc, #136]	; (8001804 <HAL_RCC_OscConfig+0x934>)
 800177a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177e:	61d3      	str	r3, [r2, #28]
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_RCC_OscConfig+0x934>)
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001788:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800178c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001796:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800179a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800179c:	2301      	movs	r3, #1
 800179e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <HAL_RCC_OscConfig+0x93c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d11a      	bne.n	80017e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_RCC_OscConfig+0x93c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a16      	ldr	r2, [pc, #88]	; (800180c <HAL_RCC_OscConfig+0x93c>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ba:	f7ff f911 	bl	80009e0 <HAL_GetTick>
 80017be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c2:	e009      	b.n	80017d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c4:	f7ff f90c 	bl	80009e0 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b64      	cmp	r3, #100	; 0x64
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e3b1      	b.n	8001f3c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <HAL_RCC_OscConfig+0x93c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ef      	beq.n	80017c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d10d      	bne.n	8001810 <HAL_RCC_OscConfig+0x940>
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <HAL_RCC_OscConfig+0x934>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4a02      	ldr	r2, [pc, #8]	; (8001804 <HAL_RCC_OscConfig+0x934>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6213      	str	r3, [r2, #32]
 8001800:	e03c      	b.n	800187c <HAL_RCC_OscConfig+0x9ac>
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	10908120 	.word	0x10908120
 800180c:	40007000 	.word	0x40007000
 8001810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001814:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10c      	bne.n	800183a <HAL_RCC_OscConfig+0x96a>
 8001820:	4bc1      	ldr	r3, [pc, #772]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	4ac0      	ldr	r2, [pc, #768]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	6213      	str	r3, [r2, #32]
 800182c:	4bbe      	ldr	r3, [pc, #760]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4abd      	ldr	r2, [pc, #756]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 8001832:	f023 0304 	bic.w	r3, r3, #4
 8001836:	6213      	str	r3, [r2, #32]
 8001838:	e020      	b.n	800187c <HAL_RCC_OscConfig+0x9ac>
 800183a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b05      	cmp	r3, #5
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0x994>
 800184a:	4bb7      	ldr	r3, [pc, #732]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4ab6      	ldr	r2, [pc, #728]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	6213      	str	r3, [r2, #32]
 8001856:	4bb4      	ldr	r3, [pc, #720]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4ab3      	ldr	r2, [pc, #716]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6213      	str	r3, [r2, #32]
 8001862:	e00b      	b.n	800187c <HAL_RCC_OscConfig+0x9ac>
 8001864:	4bb0      	ldr	r3, [pc, #704]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4aaf      	ldr	r2, [pc, #700]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	6213      	str	r3, [r2, #32]
 8001870:	4bad      	ldr	r3, [pc, #692]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	4aac      	ldr	r2, [pc, #688]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 8001876:	f023 0304 	bic.w	r3, r3, #4
 800187a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800187c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001880:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 8081 	beq.w	8001990 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188e:	f7ff f8a7 	bl	80009e0 <HAL_GetTick>
 8001892:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001896:	e00b      	b.n	80018b0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f7ff f8a2 	bl	80009e0 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e345      	b.n	8001f3c <HAL_RCC_OscConfig+0x106c>
 80018b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018b8:	2202      	movs	r2, #2
 80018ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018c0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	fa93 f2a3 	rbit	r2, r3
 80018ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ce:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018d8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018dc:	2202      	movs	r2, #2
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	fa93 f2a3 	rbit	r2, r3
 80018ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018f2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018f6:	601a      	str	r2, [r3, #0]
  return result;
 80018f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001900:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001902:	fab3 f383 	clz	r3, r3
 8001906:	b2db      	uxtb	r3, r3
 8001908:	095b      	lsrs	r3, r3, #5
 800190a:	b2db      	uxtb	r3, r3
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d102      	bne.n	800191c <HAL_RCC_OscConfig+0xa4c>
 8001916:	4b84      	ldr	r3, [pc, #528]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 8001918:	6a1b      	ldr	r3, [r3, #32]
 800191a:	e013      	b.n	8001944 <HAL_RCC_OscConfig+0xa74>
 800191c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001920:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001924:	2202      	movs	r2, #2
 8001926:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	fa93 f2a3 	rbit	r2, r3
 8001936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	4b79      	ldr	r3, [pc, #484]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001948:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800194c:	2102      	movs	r1, #2
 800194e:	6011      	str	r1, [r2, #0]
 8001950:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001954:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	fa92 f1a2 	rbit	r1, r2
 800195e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001962:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001966:	6011      	str	r1, [r2, #0]
  return result;
 8001968:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800196c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001970:	6812      	ldr	r2, [r2, #0]
 8001972:	fab2 f282 	clz	r2, r2
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	f002 021f 	and.w	r2, r2, #31
 8001982:	2101      	movs	r1, #1
 8001984:	fa01 f202 	lsl.w	r2, r1, r2
 8001988:	4013      	ands	r3, r2
 800198a:	2b00      	cmp	r3, #0
 800198c:	d084      	beq.n	8001898 <HAL_RCC_OscConfig+0x9c8>
 800198e:	e07f      	b.n	8001a90 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001990:	f7ff f826 	bl	80009e0 <HAL_GetTick>
 8001994:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001998:	e00b      	b.n	80019b2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800199a:	f7ff f821 	bl	80009e0 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e2c4      	b.n	8001f3c <HAL_RCC_OscConfig+0x106c>
 80019b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019ba:	2202      	movs	r2, #2
 80019bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f2a3 	rbit	r2, r3
 80019cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019da:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019de:	2202      	movs	r2, #2
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019f8:	601a      	str	r2, [r3, #0]
  return result;
 80019fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001a02:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a04:	fab3 f383 	clz	r3, r3
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	f043 0302 	orr.w	r3, r3, #2
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d102      	bne.n	8001a1e <HAL_RCC_OscConfig+0xb4e>
 8001a18:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	e013      	b.n	8001a46 <HAL_RCC_OscConfig+0xb76>
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a26:	2202      	movs	r2, #2
 8001a28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	fa93 f2a3 	rbit	r2, r3
 8001a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a4a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a4e:	2102      	movs	r1, #2
 8001a50:	6011      	str	r1, [r2, #0]
 8001a52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a56:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	fa92 f1a2 	rbit	r1, r2
 8001a60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a64:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a68:	6011      	str	r1, [r2, #0]
  return result;
 8001a6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a6e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	fab2 f282 	clz	r2, r2
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	f002 021f 	and.w	r2, r2, #31
 8001a84:	2101      	movs	r1, #1
 8001a86:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d184      	bne.n	800199a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a90:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d105      	bne.n	8001aa4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a98:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	4a22      	ldr	r2, [pc, #136]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 8001a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8242 	beq.w	8001f3a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab6:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <HAL_RCC_OscConfig+0xc58>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 030c 	and.w	r3, r3, #12
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	f000 8213 	beq.w	8001eea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	f040 8162 	bne.w	8001d9a <HAL_RCC_OscConfig+0xeca>
 8001ad6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ada:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001ade:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ae2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	fa93 f2a3 	rbit	r2, r3
 8001af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001afa:	601a      	str	r2, [r3, #0]
  return result;
 8001afc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b00:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001b04:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b06:	fab3 f383 	clz	r3, r3
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	461a      	mov	r2, r3
 8001b18:	2300      	movs	r3, #0
 8001b1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1c:	f7fe ff60 	bl	80009e0 <HAL_GetTick>
 8001b20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b24:	e00c      	b.n	8001b40 <HAL_RCC_OscConfig+0xc70>
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2c:	f7fe ff58 	bl	80009e0 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e1fd      	b.n	8001f3c <HAL_RCC_OscConfig+0x106c>
 8001b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b44:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b52:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	fa93 f2a3 	rbit	r2, r3
 8001b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b60:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b64:	601a      	str	r2, [r3, #0]
  return result;
 8001b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b6e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d102      	bne.n	8001b8a <HAL_RCC_OscConfig+0xcba>
 8001b84:	4bb0      	ldr	r3, [pc, #704]	; (8001e48 <HAL_RCC_OscConfig+0xf78>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	e027      	b.n	8001bda <HAL_RCC_OscConfig+0xd0a>
 8001b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	fa93 f2a3 	rbit	r2, r3
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001bb8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bc2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	fa93 f2a3 	rbit	r2, r3
 8001bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bd0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	4b9c      	ldr	r3, [pc, #624]	; (8001e48 <HAL_RCC_OscConfig+0xf78>)
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bde:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001be2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001be6:	6011      	str	r1, [r2, #0]
 8001be8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bec:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	fa92 f1a2 	rbit	r1, r2
 8001bf6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bfa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bfe:	6011      	str	r1, [r2, #0]
  return result;
 8001c00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001c04:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	fab2 f282 	clz	r2, r2
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	f042 0220 	orr.w	r2, r2, #32
 8001c14:	b2d2      	uxtb	r2, r2
 8001c16:	f002 021f 	and.w	r2, r2, #31
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c20:	4013      	ands	r3, r2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d182      	bne.n	8001b2c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c26:	4b88      	ldr	r3, [pc, #544]	; (8001e48 <HAL_RCC_OscConfig+0xf78>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6a1b      	ldr	r3, [r3, #32]
 8001c46:	430b      	orrs	r3, r1
 8001c48:	497f      	ldr	r1, [pc, #508]	; (8001e48 <HAL_RCC_OscConfig+0xf78>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
 8001c4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c52:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c60:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	fa93 f2a3 	rbit	r2, r3
 8001c6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c72:	601a      	str	r2, [r3, #0]
  return result;
 8001c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c78:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c7c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c7e:	fab3 f383 	clz	r3, r3
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	461a      	mov	r2, r3
 8001c90:	2301      	movs	r3, #1
 8001c92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7fe fea4 	bl	80009e0 <HAL_GetTick>
 8001c98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c9c:	e009      	b.n	8001cb2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7fe fe9f 	bl	80009e0 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e144      	b.n	8001f3c <HAL_RCC_OscConfig+0x106c>
 8001cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	fa93 f2a3 	rbit	r2, r3
 8001cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001cd6:	601a      	str	r2, [r3, #0]
  return result;
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ce0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	095b      	lsrs	r3, r3, #5
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d102      	bne.n	8001cfc <HAL_RCC_OscConfig+0xe2c>
 8001cf6:	4b54      	ldr	r3, [pc, #336]	; (8001e48 <HAL_RCC_OscConfig+0xf78>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	e027      	b.n	8001d4c <HAL_RCC_OscConfig+0xe7c>
 8001cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d00:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	fa93 f2a3 	rbit	r2, r3
 8001d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d1c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d26:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d34:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	fa93 f2a3 	rbit	r2, r3
 8001d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d42:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <HAL_RCC_OscConfig+0xf78>)
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d50:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d58:	6011      	str	r1, [r2, #0]
 8001d5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d5e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	fa92 f1a2 	rbit	r1, r2
 8001d68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d6c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d70:	6011      	str	r1, [r2, #0]
  return result;
 8001d72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d76:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	fab2 f282 	clz	r2, r2
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	f042 0220 	orr.w	r2, r2, #32
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	f002 021f 	and.w	r2, r2, #31
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d92:	4013      	ands	r3, r2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d082      	beq.n	8001c9e <HAL_RCC_OscConfig+0xdce>
 8001d98:	e0cf      	b.n	8001f3a <HAL_RCC_OscConfig+0x106a>
 8001d9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d9e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001da2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	fa93 f2a3 	rbit	r2, r3
 8001db6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dbe:	601a      	str	r2, [r3, #0]
  return result;
 8001dc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001dc8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	461a      	mov	r2, r3
 8001ddc:	2300      	movs	r3, #0
 8001dde:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7fe fdfe 	bl	80009e0 <HAL_GetTick>
 8001de4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de8:	e009      	b.n	8001dfe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dea:	f7fe fdf9 	bl	80009e0 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e09e      	b.n	8001f3c <HAL_RCC_OscConfig+0x106c>
 8001dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e02:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e10:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fa93 f2a3 	rbit	r2, r3
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e22:	601a      	str	r2, [r3, #0]
  return result;
 8001e24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e28:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001e2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	095b      	lsrs	r3, r3, #5
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d104      	bne.n	8001e4c <HAL_RCC_OscConfig+0xf7c>
 8001e42:	4b01      	ldr	r3, [pc, #4]	; (8001e48 <HAL_RCC_OscConfig+0xf78>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	e029      	b.n	8001e9c <HAL_RCC_OscConfig+0xfcc>
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e50:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e5e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	fa93 f2a3 	rbit	r2, r3
 8001e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e76:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e84:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	fa93 f2a3 	rbit	r2, r3
 8001e8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e92:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <HAL_RCC_OscConfig+0x1078>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ea0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001ea4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ea8:	6011      	str	r1, [r2, #0]
 8001eaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001eae:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001eb2:	6812      	ldr	r2, [r2, #0]
 8001eb4:	fa92 f1a2 	rbit	r1, r2
 8001eb8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ebc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001ec0:	6011      	str	r1, [r2, #0]
  return result;
 8001ec2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001ec6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	fab2 f282 	clz	r2, r2
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	f042 0220 	orr.w	r2, r2, #32
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	f002 021f 	and.w	r2, r2, #31
 8001edc:	2101      	movs	r1, #1
 8001ede:	fa01 f202 	lsl.w	r2, r1, r2
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d180      	bne.n	8001dea <HAL_RCC_OscConfig+0xf1a>
 8001ee8:	e027      	b.n	8001f3a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e01e      	b.n	8001f3c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001efe:	4b12      	ldr	r3, [pc, #72]	; (8001f48 <HAL_RCC_OscConfig+0x1078>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f0a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d10b      	bne.n	8001f36 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001f1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001f22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d001      	beq.n	8001f3a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000

08001f4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b09e      	sub	sp, #120	; 0x78
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e162      	b.n	800222a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f64:	4b90      	ldr	r3, [pc, #576]	; (80021a8 <HAL_RCC_ClockConfig+0x25c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d910      	bls.n	8001f94 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b8d      	ldr	r3, [pc, #564]	; (80021a8 <HAL_RCC_ClockConfig+0x25c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0207 	bic.w	r2, r3, #7
 8001f7a:	498b      	ldr	r1, [pc, #556]	; (80021a8 <HAL_RCC_ClockConfig+0x25c>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b89      	ldr	r3, [pc, #548]	; (80021a8 <HAL_RCC_ClockConfig+0x25c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e14a      	b.n	800222a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa0:	4b82      	ldr	r3, [pc, #520]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	497f      	ldr	r1, [pc, #508]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80dc 	beq.w	8002178 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d13c      	bne.n	8002042 <HAL_RCC_ClockConfig+0xf6>
 8001fc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fcc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fd0:	fa93 f3a3 	rbit	r3, r3
 8001fd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd8:	fab3 f383 	clz	r3, r3
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d102      	bne.n	8001ff2 <HAL_RCC_ClockConfig+0xa6>
 8001fec:	4b6f      	ldr	r3, [pc, #444]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	e00f      	b.n	8002012 <HAL_RCC_ClockConfig+0xc6>
 8001ff2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ff6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	667b      	str	r3, [r7, #100]	; 0x64
 8002000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002004:	663b      	str	r3, [r7, #96]	; 0x60
 8002006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800200e:	4b67      	ldr	r3, [pc, #412]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002016:	65ba      	str	r2, [r7, #88]	; 0x58
 8002018:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800201a:	fa92 f2a2 	rbit	r2, r2
 800201e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002020:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002022:	fab2 f282 	clz	r2, r2
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	f042 0220 	orr.w	r2, r2, #32
 800202c:	b2d2      	uxtb	r2, r2
 800202e:	f002 021f 	and.w	r2, r2, #31
 8002032:	2101      	movs	r1, #1
 8002034:	fa01 f202 	lsl.w	r2, r1, r2
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d17b      	bne.n	8002136 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e0f3      	b.n	800222a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d13c      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x178>
 800204a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800204e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002052:	fa93 f3a3 	rbit	r3, r3
 8002056:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205a:	fab3 f383 	clz	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	095b      	lsrs	r3, r3, #5
 8002062:	b2db      	uxtb	r3, r3
 8002064:	f043 0301 	orr.w	r3, r3, #1
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b01      	cmp	r3, #1
 800206c:	d102      	bne.n	8002074 <HAL_RCC_ClockConfig+0x128>
 800206e:	4b4f      	ldr	r3, [pc, #316]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	e00f      	b.n	8002094 <HAL_RCC_ClockConfig+0x148>
 8002074:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002078:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	647b      	str	r3, [r7, #68]	; 0x44
 8002082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002086:	643b      	str	r3, [r7, #64]	; 0x40
 8002088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002090:	4b46      	ldr	r3, [pc, #280]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002098:	63ba      	str	r2, [r7, #56]	; 0x38
 800209a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800209c:	fa92 f2a2 	rbit	r2, r2
 80020a0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80020a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020a4:	fab2 f282 	clz	r2, r2
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	f042 0220 	orr.w	r2, r2, #32
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	f002 021f 	and.w	r2, r2, #31
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d13a      	bne.n	8002136 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e0b2      	b.n	800222a <HAL_RCC_ClockConfig+0x2de>
 80020c4:	2302      	movs	r3, #2
 80020c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ca:	fa93 f3a3 	rbit	r3, r3
 80020ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	095b      	lsrs	r3, r3, #5
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d102      	bne.n	80020ec <HAL_RCC_ClockConfig+0x1a0>
 80020e6:	4b31      	ldr	r3, [pc, #196]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	e00d      	b.n	8002108 <HAL_RCC_ClockConfig+0x1bc>
 80020ec:	2302      	movs	r3, #2
 80020ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	2302      	movs	r3, #2
 80020fa:	623b      	str	r3, [r7, #32]
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	fa93 f3a3 	rbit	r3, r3
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	4b29      	ldr	r3, [pc, #164]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	2202      	movs	r2, #2
 800210a:	61ba      	str	r2, [r7, #24]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	fa92 f2a2 	rbit	r2, r2
 8002112:	617a      	str	r2, [r7, #20]
  return result;
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	fab2 f282 	clz	r2, r2
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	f042 0220 	orr.w	r2, r2, #32
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	f002 021f 	and.w	r2, r2, #31
 8002126:	2101      	movs	r1, #1
 8002128:	fa01 f202 	lsl.w	r2, r1, r2
 800212c:	4013      	ands	r3, r2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e079      	b.n	800222a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4b1d      	ldr	r3, [pc, #116]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f023 0203 	bic.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	491a      	ldr	r1, [pc, #104]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002148:	f7fe fc4a 	bl	80009e0 <HAL_GetTick>
 800214c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	e00a      	b.n	8002166 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7fe fc46 	bl	80009e0 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e061      	b.n	800222a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_RCC_ClockConfig+0x260>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 020c 	and.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	429a      	cmp	r2, r3
 8002176:	d1eb      	bne.n	8002150 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_ClockConfig+0x25c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d214      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_RCC_ClockConfig+0x25c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 0207 	bic.w	r2, r3, #7
 800218e:	4906      	ldr	r1, [pc, #24]	; (80021a8 <HAL_RCC_ClockConfig+0x25c>)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <HAL_RCC_ClockConfig+0x25c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e040      	b.n	800222a <HAL_RCC_ClockConfig+0x2de>
 80021a8:	40022000 	.word	0x40022000
 80021ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021bc:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_RCC_ClockConfig+0x2e8>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	491a      	ldr	r1, [pc, #104]	; (8002234 <HAL_RCC_ClockConfig+0x2e8>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021da:	4b16      	ldr	r3, [pc, #88]	; (8002234 <HAL_RCC_ClockConfig+0x2e8>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4912      	ldr	r1, [pc, #72]	; (8002234 <HAL_RCC_ClockConfig+0x2e8>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021ee:	f000 f829 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 80021f2:	4601      	mov	r1, r0
 80021f4:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <HAL_RCC_ClockConfig+0x2e8>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021fc:	22f0      	movs	r2, #240	; 0xf0
 80021fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	fa92 f2a2 	rbit	r2, r2
 8002206:	60fa      	str	r2, [r7, #12]
  return result;
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	fab2 f282 	clz	r2, r2
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	40d3      	lsrs	r3, r2
 8002212:	4a09      	ldr	r2, [pc, #36]	; (8002238 <HAL_RCC_ClockConfig+0x2ec>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	fa21 f303 	lsr.w	r3, r1, r3
 800221a:	4a08      	ldr	r2, [pc, #32]	; (800223c <HAL_RCC_ClockConfig+0x2f0>)
 800221c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <HAL_RCC_ClockConfig+0x2f4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe face 	bl	80007c4 <HAL_InitTick>
  
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3778      	adds	r7, #120	; 0x78
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	080030b4 	.word	0x080030b4
 800223c:	20000000 	.word	0x20000000
 8002240:	20000004 	.word	0x20000004

08002244 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 030c 	and.w	r3, r3, #12
 800226a:	2b04      	cmp	r3, #4
 800226c:	d002      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x30>
 800226e:	2b08      	cmp	r3, #8
 8002270:	d003      	beq.n	800227a <HAL_RCC_GetSysClockFreq+0x36>
 8002272:	e026      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002274:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_RCC_GetSysClockFreq+0x98>)
 8002276:	613b      	str	r3, [r7, #16]
      break;
 8002278:	e026      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	0c9b      	lsrs	r3, r3, #18
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	4a17      	ldr	r2, [pc, #92]	; (80022e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002284:	5cd3      	ldrb	r3, [r2, r3]
 8002286:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <HAL_RCC_GetSysClockFreq+0x94>)
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	4a14      	ldr	r2, [pc, #80]	; (80022e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002292:	5cd3      	ldrb	r3, [r2, r3]
 8002294:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022a0:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <HAL_RCC_GetSysClockFreq+0x98>)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	e004      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
 80022ba:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	613b      	str	r3, [r7, #16]
      break;
 80022c0:	e002      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022c2:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_RCC_GetSysClockFreq+0x98>)
 80022c4:	613b      	str	r3, [r7, #16]
      break;
 80022c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c8:	693b      	ldr	r3, [r7, #16]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	007a1200 	.word	0x007a1200
 80022e0:	080030cc 	.word	0x080030cc
 80022e4:	080030dc 	.word	0x080030dc
 80022e8:	003d0900 	.word	0x003d0900

080022ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_RCC_GetHCLKFreq+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000000 	.word	0x20000000

08002304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800230a:	f7ff ffef 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 800230e:	4601      	mov	r1, r0
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002318:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800231c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	fa92 f2a2 	rbit	r2, r2
 8002324:	603a      	str	r2, [r7, #0]
  return result;
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	fab2 f282 	clz	r2, r2
 800232c:	b2d2      	uxtb	r2, r2
 800232e:	40d3      	lsrs	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002338:	4618      	mov	r0, r3
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	080030c4 	.word	0x080030c4

08002348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800234e:	f7ff ffcd 	bl	80022ec <HAL_RCC_GetHCLKFreq>
 8002352:	4601      	mov	r1, r0
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800235c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002360:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	fa92 f2a2 	rbit	r2, r2
 8002368:	603a      	str	r2, [r7, #0]
  return result;
 800236a:	683a      	ldr	r2, [r7, #0]
 800236c:	fab2 f282 	clz	r2, r2
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	40d3      	lsrs	r3, r2
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002376:	5cd3      	ldrb	r3, [r2, r3]
 8002378:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000
 8002388:	080030c4 	.word	0x080030c4

0800238c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	220f      	movs	r2, #15
 800239a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_RCC_GetClockConfig+0x5c>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0203 	and.w	r2, r3, #3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <HAL_RCC_GetClockConfig+0x5c>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_RCC_GetClockConfig+0x5c>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023c0:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <HAL_RCC_GetClockConfig+0x5c>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	08db      	lsrs	r3, r3, #3
 80023c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_RCC_GetClockConfig+0x60>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0207 	and.w	r2, r3, #7
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	601a      	str	r2, [r3, #0]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40022000 	.word	0x40022000

080023f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e049      	b.n	8002496 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f841 	bl	800249e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	4619      	mov	r1, r3
 800242e:	4610      	mov	r0, r2
 8002430:	f000 f9c6 	bl	80027c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800249e:	b480      	push	{r7}
 80024a0:	b083      	sub	sp, #12
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d001      	beq.n	80024cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e040      	b.n	800254e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2202      	movs	r2, #2
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a1c      	ldr	r2, [pc, #112]	; (800255c <HAL_TIM_Base_Start_IT+0xa8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00e      	beq.n	800250c <HAL_TIM_Base_Start_IT+0x58>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024f6:	d009      	beq.n	800250c <HAL_TIM_Base_Start_IT+0x58>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a18      	ldr	r2, [pc, #96]	; (8002560 <HAL_TIM_Base_Start_IT+0xac>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d004      	beq.n	800250c <HAL_TIM_Base_Start_IT+0x58>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a17      	ldr	r2, [pc, #92]	; (8002564 <HAL_TIM_Base_Start_IT+0xb0>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d115      	bne.n	8002538 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <HAL_TIM_Base_Start_IT+0xb4>)
 8002514:	4013      	ands	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b06      	cmp	r3, #6
 800251c:	d015      	beq.n	800254a <HAL_TIM_Base_Start_IT+0x96>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002524:	d011      	beq.n	800254a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f042 0201 	orr.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002536:	e008      	b.n	800254a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e000      	b.n	800254c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40012c00 	.word	0x40012c00
 8002560:	40000400 	.word	0x40000400
 8002564:	40014000 	.word	0x40014000
 8002568:	00010007 	.word	0x00010007

0800256c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d020      	beq.n	80025d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01b      	beq.n	80025d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f06f 0202 	mvn.w	r2, #2
 80025a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f8e4 	bl	8002784 <HAL_TIM_IC_CaptureCallback>
 80025bc:	e005      	b.n	80025ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f8d6 	bl	8002770 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f000 f8e7 	bl	8002798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d020      	beq.n	800261c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01b      	beq.n	800261c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f06f 0204 	mvn.w	r2, #4
 80025ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2202      	movs	r2, #2
 80025f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f8be 	bl	8002784 <HAL_TIM_IC_CaptureCallback>
 8002608:	e005      	b.n	8002616 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f8b0 	bl	8002770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 f8c1 	bl	8002798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d020      	beq.n	8002668 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	2b00      	cmp	r3, #0
 800262e:	d01b      	beq.n	8002668 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0208 	mvn.w	r2, #8
 8002638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2204      	movs	r2, #4
 800263e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f898 	bl	8002784 <HAL_TIM_IC_CaptureCallback>
 8002654:	e005      	b.n	8002662 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 f88a 	bl	8002770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f89b 	bl	8002798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	d020      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0310 	and.w	r3, r3, #16
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01b      	beq.n	80026b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0210 	mvn.w	r2, #16
 8002684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2208      	movs	r2, #8
 800268a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f872 	bl	8002784 <HAL_TIM_IC_CaptureCallback>
 80026a0:	e005      	b.n	80026ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f864 	bl	8002770 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f875 	bl	8002798 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00c      	beq.n	80026d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0201 	mvn.w	r2, #1
 80026d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7fd fff6 	bl	80006c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00c      	beq.n	80026fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d007      	beq.n	80026fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f8f0 	bl	80028dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00c      	beq.n	8002720 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270c:	2b00      	cmp	r3, #0
 800270e:	d007      	beq.n	8002720 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f8e8 	bl	80028f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00c      	beq.n	8002744 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002730:	2b00      	cmp	r3, #0
 8002732:	d007      	beq.n	8002744 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800273c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f834 	bl	80027ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f003 0320 	and.w	r3, r3, #32
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00c      	beq.n	8002768 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	2b00      	cmp	r3, #0
 8002756:	d007      	beq.n	8002768 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0220 	mvn.w	r2, #32
 8002760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f8b0 	bl	80028c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002768:	bf00      	nop
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	4a38      	ldr	r2, [pc, #224]	; (80028b4 <TIM_Base_SetConfig+0xf4>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d007      	beq.n	80027e8 <TIM_Base_SetConfig+0x28>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027de:	d003      	beq.n	80027e8 <TIM_Base_SetConfig+0x28>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4a35      	ldr	r2, [pc, #212]	; (80028b8 <TIM_Base_SetConfig+0xf8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d108      	bne.n	80027fa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a2d      	ldr	r2, [pc, #180]	; (80028b4 <TIM_Base_SetConfig+0xf4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d013      	beq.n	800282a <TIM_Base_SetConfig+0x6a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002808:	d00f      	beq.n	800282a <TIM_Base_SetConfig+0x6a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a2a      	ldr	r2, [pc, #168]	; (80028b8 <TIM_Base_SetConfig+0xf8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d00b      	beq.n	800282a <TIM_Base_SetConfig+0x6a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a29      	ldr	r2, [pc, #164]	; (80028bc <TIM_Base_SetConfig+0xfc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d007      	beq.n	800282a <TIM_Base_SetConfig+0x6a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a28      	ldr	r2, [pc, #160]	; (80028c0 <TIM_Base_SetConfig+0x100>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d003      	beq.n	800282a <TIM_Base_SetConfig+0x6a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a27      	ldr	r2, [pc, #156]	; (80028c4 <TIM_Base_SetConfig+0x104>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d108      	bne.n	800283c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4313      	orrs	r3, r2
 800283a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a14      	ldr	r2, [pc, #80]	; (80028b4 <TIM_Base_SetConfig+0xf4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00b      	beq.n	8002880 <TIM_Base_SetConfig+0xc0>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a14      	ldr	r2, [pc, #80]	; (80028bc <TIM_Base_SetConfig+0xfc>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d007      	beq.n	8002880 <TIM_Base_SetConfig+0xc0>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a13      	ldr	r2, [pc, #76]	; (80028c0 <TIM_Base_SetConfig+0x100>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d003      	beq.n	8002880 <TIM_Base_SetConfig+0xc0>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <TIM_Base_SetConfig+0x104>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d103      	bne.n	8002888 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b01      	cmp	r3, #1
 8002898:	d105      	bne.n	80028a6 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f023 0201 	bic.w	r2, r3, #1
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	611a      	str	r2, [r3, #16]
  }
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40014000 	.word	0x40014000
 80028c0:	40014400 	.word	0x40014400
 80028c4:	40014800 	.word	0x40014800

080028c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e040      	b.n	8002998 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fd ff08 	bl	800073c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2224      	movs	r2, #36	; 0x24
 8002930:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f95e 	bl	8002c0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f825 	bl	80029a0 <UART_SetConfig>
 8002956:	4603      	mov	r3, r0
 8002958:	2b01      	cmp	r3, #1
 800295a:	d101      	bne.n	8002960 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e01b      	b.n	8002998 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800296e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689a      	ldr	r2, [r3, #8]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800297e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f042 0201 	orr.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f9dd 	bl	8002d50 <UART_CheckIdleState>
 8002996:	4603      	mov	r3, r0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4b8a      	ldr	r3, [pc, #552]	; (8002bf4 <UART_SetConfig+0x254>)
 80029cc:	4013      	ands	r3, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	6979      	ldr	r1, [r7, #20]
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a78      	ldr	r2, [pc, #480]	; (8002bf8 <UART_SetConfig+0x258>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d120      	bne.n	8002a5e <UART_SetConfig+0xbe>
 8002a1c:	4b77      	ldr	r3, [pc, #476]	; (8002bfc <UART_SetConfig+0x25c>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d817      	bhi.n	8002a58 <UART_SetConfig+0xb8>
 8002a28:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <UART_SetConfig+0x90>)
 8002a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2e:	bf00      	nop
 8002a30:	08002a41 	.word	0x08002a41
 8002a34:	08002a4d 	.word	0x08002a4d
 8002a38:	08002a53 	.word	0x08002a53
 8002a3c:	08002a47 	.word	0x08002a47
 8002a40:	2300      	movs	r3, #0
 8002a42:	77fb      	strb	r3, [r7, #31]
 8002a44:	e01d      	b.n	8002a82 <UART_SetConfig+0xe2>
 8002a46:	2302      	movs	r3, #2
 8002a48:	77fb      	strb	r3, [r7, #31]
 8002a4a:	e01a      	b.n	8002a82 <UART_SetConfig+0xe2>
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	77fb      	strb	r3, [r7, #31]
 8002a50:	e017      	b.n	8002a82 <UART_SetConfig+0xe2>
 8002a52:	2308      	movs	r3, #8
 8002a54:	77fb      	strb	r3, [r7, #31]
 8002a56:	e014      	b.n	8002a82 <UART_SetConfig+0xe2>
 8002a58:	2310      	movs	r3, #16
 8002a5a:	77fb      	strb	r3, [r7, #31]
 8002a5c:	e011      	b.n	8002a82 <UART_SetConfig+0xe2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a67      	ldr	r2, [pc, #412]	; (8002c00 <UART_SetConfig+0x260>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d102      	bne.n	8002a6e <UART_SetConfig+0xce>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	77fb      	strb	r3, [r7, #31]
 8002a6c:	e009      	b.n	8002a82 <UART_SetConfig+0xe2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a64      	ldr	r2, [pc, #400]	; (8002c04 <UART_SetConfig+0x264>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d102      	bne.n	8002a7e <UART_SetConfig+0xde>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	77fb      	strb	r3, [r7, #31]
 8002a7c:	e001      	b.n	8002a82 <UART_SetConfig+0xe2>
 8002a7e:	2310      	movs	r3, #16
 8002a80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a8a:	d15a      	bne.n	8002b42 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002a8c:	7ffb      	ldrb	r3, [r7, #31]
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d827      	bhi.n	8002ae2 <UART_SetConfig+0x142>
 8002a92:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <UART_SetConfig+0xf8>)
 8002a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a98:	08002abd 	.word	0x08002abd
 8002a9c:	08002ac5 	.word	0x08002ac5
 8002aa0:	08002acd 	.word	0x08002acd
 8002aa4:	08002ae3 	.word	0x08002ae3
 8002aa8:	08002ad3 	.word	0x08002ad3
 8002aac:	08002ae3 	.word	0x08002ae3
 8002ab0:	08002ae3 	.word	0x08002ae3
 8002ab4:	08002ae3 	.word	0x08002ae3
 8002ab8:	08002adb 	.word	0x08002adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002abc:	f7ff fc22 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 8002ac0:	61b8      	str	r0, [r7, #24]
        break;
 8002ac2:	e013      	b.n	8002aec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ac4:	f7ff fc40 	bl	8002348 <HAL_RCC_GetPCLK2Freq>
 8002ac8:	61b8      	str	r0, [r7, #24]
        break;
 8002aca:	e00f      	b.n	8002aec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002acc:	4b4e      	ldr	r3, [pc, #312]	; (8002c08 <UART_SetConfig+0x268>)
 8002ace:	61bb      	str	r3, [r7, #24]
        break;
 8002ad0:	e00c      	b.n	8002aec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ad2:	f7ff fbb7 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 8002ad6:	61b8      	str	r0, [r7, #24]
        break;
 8002ad8:	e008      	b.n	8002aec <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ade:	61bb      	str	r3, [r7, #24]
        break;
 8002ae0:	e004      	b.n	8002aec <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	77bb      	strb	r3, [r7, #30]
        break;
 8002aea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d074      	beq.n	8002bdc <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	005a      	lsls	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	085b      	lsrs	r3, r3, #1
 8002afc:	441a      	add	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	2b0f      	cmp	r3, #15
 8002b0c:	d916      	bls.n	8002b3c <UART_SetConfig+0x19c>
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b14:	d212      	bcs.n	8002b3c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f023 030f 	bic.w	r3, r3, #15
 8002b1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	89fb      	ldrh	r3, [r7, #14]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	89fa      	ldrh	r2, [r7, #14]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	e04f      	b.n	8002bdc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	77bb      	strb	r3, [r7, #30]
 8002b40:	e04c      	b.n	8002bdc <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b42:	7ffb      	ldrb	r3, [r7, #31]
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d828      	bhi.n	8002b9a <UART_SetConfig+0x1fa>
 8002b48:	a201      	add	r2, pc, #4	; (adr r2, 8002b50 <UART_SetConfig+0x1b0>)
 8002b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4e:	bf00      	nop
 8002b50:	08002b75 	.word	0x08002b75
 8002b54:	08002b7d 	.word	0x08002b7d
 8002b58:	08002b85 	.word	0x08002b85
 8002b5c:	08002b9b 	.word	0x08002b9b
 8002b60:	08002b8b 	.word	0x08002b8b
 8002b64:	08002b9b 	.word	0x08002b9b
 8002b68:	08002b9b 	.word	0x08002b9b
 8002b6c:	08002b9b 	.word	0x08002b9b
 8002b70:	08002b93 	.word	0x08002b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b74:	f7ff fbc6 	bl	8002304 <HAL_RCC_GetPCLK1Freq>
 8002b78:	61b8      	str	r0, [r7, #24]
        break;
 8002b7a:	e013      	b.n	8002ba4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b7c:	f7ff fbe4 	bl	8002348 <HAL_RCC_GetPCLK2Freq>
 8002b80:	61b8      	str	r0, [r7, #24]
        break;
 8002b82:	e00f      	b.n	8002ba4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b84:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <UART_SetConfig+0x268>)
 8002b86:	61bb      	str	r3, [r7, #24]
        break;
 8002b88:	e00c      	b.n	8002ba4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b8a:	f7ff fb5b 	bl	8002244 <HAL_RCC_GetSysClockFreq>
 8002b8e:	61b8      	str	r0, [r7, #24]
        break;
 8002b90:	e008      	b.n	8002ba4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b96:	61bb      	str	r3, [r7, #24]
        break;
 8002b98:	e004      	b.n	8002ba4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	77bb      	strb	r3, [r7, #30]
        break;
 8002ba2:	bf00      	nop
    }

    if (pclk != 0U)
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d018      	beq.n	8002bdc <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	085a      	lsrs	r2, r3, #1
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	441a      	add	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b0f      	cmp	r3, #15
 8002bc2:	d909      	bls.n	8002bd8 <UART_SetConfig+0x238>
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bca:	d205      	bcs.n	8002bd8 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	b29a      	uxth	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	e001      	b.n	8002bdc <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002be8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3720      	adds	r7, #32
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	efff69f3 	.word	0xefff69f3
 8002bf8:	40013800 	.word	0x40013800
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40004400 	.word	0x40004400
 8002c04:	40004800 	.word	0x40004800
 8002c08:	007a1200 	.word	0x007a1200

08002c0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00a      	beq.n	8002c36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00a      	beq.n	8002c7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	f003 0310 	and.w	r3, r3, #16
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	f003 0320 	and.w	r3, r3, #32
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d01a      	beq.n	8002d22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d0a:	d10a      	bne.n	8002d22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	605a      	str	r2, [r3, #4]
  }
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b098      	sub	sp, #96	; 0x60
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d60:	f7fd fe3e 	bl	80009e0 <HAL_GetTick>
 8002d64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d12e      	bne.n	8002dd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f88c 	bl	8002ea0 <UART_WaitOnFlagUntilTimeout>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d021      	beq.n	8002dd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d96:	e853 3f00 	ldrex	r3, [r3]
 8002d9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002da2:	653b      	str	r3, [r7, #80]	; 0x50
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dac:	647b      	str	r3, [r7, #68]	; 0x44
 8002dae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002db4:	e841 2300 	strex	r3, r2, [r1]
 8002db8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1e6      	bne.n	8002d8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e062      	b.n	8002e98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d149      	bne.n	8002e74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de8:	2200      	movs	r2, #0
 8002dea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f856 	bl	8002ea0 <UART_WaitOnFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d03c      	beq.n	8002e74 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	623b      	str	r3, [r7, #32]
   return(result);
 8002e08:	6a3b      	ldr	r3, [r7, #32]
 8002e0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	461a      	mov	r2, r3
 8002e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e18:	633b      	str	r3, [r7, #48]	; 0x30
 8002e1a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e6      	bne.n	8002dfa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3308      	adds	r3, #8
 8002e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	e853 3f00 	ldrex	r3, [r3]
 8002e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	3308      	adds	r3, #8
 8002e4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e4c:	61fa      	str	r2, [r7, #28]
 8002e4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e50:	69b9      	ldr	r1, [r7, #24]
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	e841 2300 	strex	r3, r2, [r1]
 8002e58:	617b      	str	r3, [r7, #20]
   return(result);
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e5      	bne.n	8002e2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e011      	b.n	8002e98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3758      	adds	r7, #88	; 0x58
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	4613      	mov	r3, r2
 8002eae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb0:	e04f      	b.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eb8:	d04b      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eba:	f7fd fd91 	bl	80009e0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d302      	bcc.n	8002ed0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e04e      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0304 	and.w	r3, r3, #4
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d037      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	2b80      	cmp	r3, #128	; 0x80
 8002ee6:	d034      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d031      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d110      	bne.n	8002f1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2208      	movs	r2, #8
 8002f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f838 	bl	8002f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e029      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f2c:	d111      	bne.n	8002f52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f81e 	bl	8002f7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e00f      	b.n	8002f72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	69da      	ldr	r2, [r3, #28]
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d0a0      	beq.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b095      	sub	sp, #84	; 0x54
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8a:	e853 3f00 	ldrex	r3, [r3]
 8002f8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8002fa2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002fa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002fa8:	e841 2300 	strex	r3, r2, [r1]
 8002fac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e6      	bne.n	8002f82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3308      	adds	r3, #8
 8002fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	e853 3f00 	ldrex	r3, [r3]
 8002fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fdc:	e841 2300 	strex	r3, r2, [r1]
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e5      	bne.n	8002fb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d118      	bne.n	8003022 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	e853 3f00 	ldrex	r3, [r3]
 8002ffc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	f023 0310 	bic.w	r3, r3, #16
 8003004:	647b      	str	r3, [r7, #68]	; 0x44
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800300e:	61bb      	str	r3, [r7, #24]
 8003010:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003012:	6979      	ldr	r1, [r7, #20]
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	e841 2300 	strex	r3, r2, [r1]
 800301a:	613b      	str	r3, [r7, #16]
   return(result);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e6      	bne.n	8002ff0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003036:	bf00      	nop
 8003038:	3754      	adds	r7, #84	; 0x54
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <memset>:
 8003042:	4402      	add	r2, r0
 8003044:	4603      	mov	r3, r0
 8003046:	4293      	cmp	r3, r2
 8003048:	d100      	bne.n	800304c <memset+0xa>
 800304a:	4770      	bx	lr
 800304c:	f803 1b01 	strb.w	r1, [r3], #1
 8003050:	e7f9      	b.n	8003046 <memset+0x4>
	...

08003054 <__libc_init_array>:
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	4d0d      	ldr	r5, [pc, #52]	; (800308c <__libc_init_array+0x38>)
 8003058:	4c0d      	ldr	r4, [pc, #52]	; (8003090 <__libc_init_array+0x3c>)
 800305a:	1b64      	subs	r4, r4, r5
 800305c:	10a4      	asrs	r4, r4, #2
 800305e:	2600      	movs	r6, #0
 8003060:	42a6      	cmp	r6, r4
 8003062:	d109      	bne.n	8003078 <__libc_init_array+0x24>
 8003064:	4d0b      	ldr	r5, [pc, #44]	; (8003094 <__libc_init_array+0x40>)
 8003066:	4c0c      	ldr	r4, [pc, #48]	; (8003098 <__libc_init_array+0x44>)
 8003068:	f000 f818 	bl	800309c <_init>
 800306c:	1b64      	subs	r4, r4, r5
 800306e:	10a4      	asrs	r4, r4, #2
 8003070:	2600      	movs	r6, #0
 8003072:	42a6      	cmp	r6, r4
 8003074:	d105      	bne.n	8003082 <__libc_init_array+0x2e>
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	f855 3b04 	ldr.w	r3, [r5], #4
 800307c:	4798      	blx	r3
 800307e:	3601      	adds	r6, #1
 8003080:	e7ee      	b.n	8003060 <__libc_init_array+0xc>
 8003082:	f855 3b04 	ldr.w	r3, [r5], #4
 8003086:	4798      	blx	r3
 8003088:	3601      	adds	r6, #1
 800308a:	e7f2      	b.n	8003072 <__libc_init_array+0x1e>
 800308c:	080030ec 	.word	0x080030ec
 8003090:	080030ec 	.word	0x080030ec
 8003094:	080030ec 	.word	0x080030ec
 8003098:	080030f0 	.word	0x080030f0

0800309c <_init>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	bf00      	nop
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr

080030a8 <_fini>:
 80030a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030aa:	bf00      	nop
 80030ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ae:	bc08      	pop	{r3}
 80030b0:	469e      	mov	lr, r3
 80030b2:	4770      	bx	lr
